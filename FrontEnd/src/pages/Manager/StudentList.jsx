import React, { useState, useRef } from "react";
import "../../css/Manager/StudentList.css";

function StudentList() {
  // Mock data for preschool students
  const [students] = useState([
    {
      id: 1,
      studentId: "MN001",
      fullName: "Nguy·ªÖn VƒÉn An",
      dateOfBirth: "2020-05-15",
      gender: "Nam",
      className: "M·∫ßm",
      parentName: "Nguy·ªÖn Th·ªã Hoa",
      parentPhone: "0912345678",
      address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
      healthStatus: "B√¨nh th∆∞·ªùng",
      allergies: "Kh√¥ng",
      emergencyContact: "0987654321",
      enrollmentDate: "2024-01-15",
      bloodType: "O+",
      height: "95cm",
      weight: "14kg",
      notes: "B√© kh·ªèe m·∫°nh, ho·∫°t b√°t",
    },
    {
      id: 2,
      studentId: "MN002",
      fullName: "Tr·∫ßn Th·ªã B√¨nh",
      dateOfBirth: "2020-08-22",
      gender: "N·ªØ",
      className: "Ch·ªìi",
      parentName: "Tr·∫ßn VƒÉn Nam",
      parentPhone: "0923456789",
      address: "456 ƒê∆∞·ªùng DEF, Qu·∫≠n 2, TP.HCM",
      healthStatus: "C√≥ d·ªã ·ª©ng",
      allergies: "D·ªã ·ª©ng v·ªõi s·ªØa b√≤",
      emergencyContact: "0976543210",
      enrollmentDate: "2024-01-20",
      bloodType: "A+",
      height: "92cm",
      weight: "13.5kg",
      notes: "C·∫ßn ch√∫ √Ω ch·∫ø ƒë·ªô ƒÉn",
    },
    {
      id: 3,
      studentId: "MN003",
      fullName: "L√™ Minh C∆∞·ªùng",
      dateOfBirth: "2019-12-10",
      gender: "Nam",
      className: "L√° 1",
      parentName: "L√™ Th·ªã Mai",
      parentPhone: "0934567890",
      address: "789 ƒê∆∞·ªùng GHI, Qu·∫≠n 3, TP.HCM",
      healthStatus: "B√¨nh th∆∞·ªùng",
      allergies: "Kh√¥ng",
      emergencyContact: "0965432109",
      enrollmentDate: "2023-09-01",
      bloodType: "B+",
      height: "98cm",
      weight: "15kg",
      notes: "B√© th√¥ng minh, ham h·ªçc h·ªèi",
    },
    {
      id: 4,
      studentId: "MN004",
      fullName: "Ph·∫°m Th·ªã Di·ªáu",
      dateOfBirth: "2019-03-08",
      gender: "N·ªØ",
      className: "L√° 2",
      parentName: "Ph·∫°m VƒÉn H√πng",
      parentPhone: "0945678901",
      address: "321 ƒê∆∞·ªùng JKL, Qu·∫≠n 4, TP.HCM",
      healthStatus: "C·∫ßn theo d√µi",
      allergies: "D·ªã ·ª©ng ph·∫•n hoa",
      emergencyContact: "0954321098",
      enrollmentDate: "2023-09-01",
      bloodType: "AB+",
      height: "102cm",
      weight: "16kg",
      notes: "C·∫ßn ch√∫ √Ω khi ra ngo√†i tr·ªùi",
    },
    {
      id: 5,
      studentId: "MN005",
      fullName: "Ho√†ng VƒÉn Em",
      dateOfBirth: "2019-07-30",
      gender: "Nam",
      className: "L√° 3",
      parentName: "Ho√†ng Th·ªã Lan",
      parentPhone: "0956789012",
      address: "654 ƒê∆∞·ªùng MNO, Qu·∫≠n 5, TP.HCM",
      healthStatus: "B√¨nh th∆∞·ªùng",
      allergies: "Kh√¥ng",
      emergencyContact: "0943210987",
      enrollmentDate: "2023-09-01",
      bloodType: "O-",
      height: "105cm",
      weight: "17kg",
      notes: "B√© nƒÉng ƒë·ªông, th√≠ch ch∆°i th·ªÉ thao",
    },
    {
      id: 6,
      studentId: "MN006",
      fullName: "V√µ Th·ªã Ph∆∞·ª£ng",
      dateOfBirth: "2020-11-18",
      gender: "N·ªØ",
      className: "Ch·ªìi",
      parentName: "V√µ VƒÉn Giang",
      parentPhone: "0967890123",
      address: "987 ƒê∆∞·ªùng PQR, Qu·∫≠n 6, TP.HCM",
      healthStatus: "B√¨nh th∆∞·ªùng",
      allergies: "Kh√¥ng",
      emergencyContact: "0932109876",
      enrollmentDate: "2024-01-15",
      bloodType: "A-",
      height: "90cm",
      weight: "13kg",
      notes: "B√© nh√∫t nh√°t, c·∫ßn khuy·∫øn kh√≠ch",
    },
  ]);

  // State management
  const [searchTerm, setSearchTerm] = useState("");
  const [filterClass, setFilterClass] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [currentStudent, setCurrentStudent] = useState(null);
  const fileInputRef = useRef(null);

  // Available classes for preschool
  const classes = ["M·∫ßm", "Ch·ªìi", "L√° 1", "L√° 2", "L√° 3"];

  // Filter students based on search and class filter
  const filteredStudents = students.filter((student) => {
    const matchesSearch =
      student.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.studentId.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.parentName.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesClass =
      filterClass === "" || student.className === filterClass;
    return matchesSearch && matchesClass;
  });

  // Handle viewing student information
  const handleViewStudent = (student) => {
    setCurrentStudent(student);
    setShowModal(true);
  };

  // Handle file import
  const handleFileImport = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Here you would normally send the file to your backend API
      console.log("File selected:", file.name);
      alert(`ƒê√£ ch·ªçn file: ${file.name}\nS·∫Ω g·ª≠i ƒë·∫øn API backend ƒë·ªÉ x·ª≠ l√Ω.`);

      // Reset file input
      event.target.value = "";
    }
  };

  // Get health status badge class
  const getHealthStatusClass = (status) => {
    switch (status) {
      case "B√¨nh th∆∞·ªùng":
        return "status-normal";
      case "C·∫ßn theo d√µi":
        return "status-watch";
      case "C√≥ d·ªã ·ª©ng":
        return "status-allergy";
      default:
        return "status-normal";
    }
  };

  return (
    <div className="student-list-container">
      <div className="student-list-header">
        <h1>Danh S√°ch H·ªçc Sinh</h1>
        <p>Qu·∫£n l√Ω th√¥ng tin h·ªçc sinh tr∆∞·ªùng m·∫ßm non</p>
      </div>

      {/* Controls */}
      <div className="controls-section">
        <div className="search-filter-controls">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n, m√£ h·ªçc sinh, t√™n ph·ª• huynh..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <div className="filter-controls">
            <select
              value={filterClass}
              onChange={(e) => setFilterClass(e.target.value)}
            >
              <option value="">T·∫•t c·∫£ l·ªõp</option>
              {classes.map((className) => (
                <option key={className} value={className}>
                  {className}
                </option>
              ))}
            </select>
          </div>

          <button className="import-btn" onClick={handleFileImport}>
            üìÅ Import File
          </button>
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            accept=".xlsx,.xls,.csv"
            style={{ display: "none" }}
          />
        </div>
      </div>

      {/* Student Table */}
      <div className="table-container">
        <table className="student-table">
          <thead>
            <tr>
              <th>M√£ HS</th>
              <th>H·ªç t√™n</th>
              <th>L·ªõp</th>
              <th>Ph·ª• huynh</th>
              <th>Ng√†y sinh</th>
              <th>Gi·ªõi t√≠nh</th>
              <th>S·ª©c kh·ªèe</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredStudents.map((student) => (
              <tr key={student.id}>
                <td className="student-id">{student.studentId}</td>
                <td>
                  <div className="student-info">
                    <strong>{student.fullName}</strong>
                    <small>{student.bloodType}</small>
                  </div>
                </td>
                <td className="class-name">{student.className}</td>
                <td>
                  <div className="parent-info">
                    <div>{student.parentName}</div>
                    <small>{student.parentPhone}</small>
                  </div>
                </td>
                <td>{student.dateOfBirth}</td>
                <td>{student.gender}</td>
                <td>
                  <span
                    className={`health-status ${getHealthStatusClass(
                      student.healthStatus
                    )}`}
                  >
                    {student.healthStatus}
                  </span>
                </td>
                <td>
                  <div className="action-buttons">
                    <button
                      className="btn-view"
                      onClick={() => handleViewStudent(student)}
                      title="Xem chi ti·∫øt"
                    >
                      üëÅÔ∏è
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {filteredStudents.length === 0 && (
          <div className="no-data">
            <p>Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p</p>
          </div>
        )}
      </div>

      {/* Student Detail Modal */}
      {showModal && currentStudent && (
        <div className="modal-overlay" onClick={() => setShowModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Th√¥ng Tin Chi Ti·∫øt H·ªçc Sinh</h3>
              <button
                className="modal-close"
                onClick={() => setShowModal(false)}
              >
                √ó
              </button>
            </div>

            <div className="modal-body">
              <div className="student-details">
                <div className="detail-grid">
                  <div className="detail-item">
                    <label>M√£ h·ªçc sinh:</label>
                    <span>{currentStudent.studentId}</span>
                  </div>
                  <div className="detail-item">
                    <label>H·ªç v√† t√™n:</label>
                    <span>{currentStudent.fullName}</span>
                  </div>
                  <div className="detail-item">
                    <label>Ng√†y sinh:</label>
                    <span>{currentStudent.dateOfBirth}</span>
                  </div>
                  <div className="detail-item">
                    <label>Gi·ªõi t√≠nh:</label>
                    <span>{currentStudent.gender}</span>
                  </div>
                  <div className="detail-item">
                    <label>L·ªõp:</label>
                    <span>{currentStudent.className}</span>
                  </div>
                  <div className="detail-item">
                    <label>Ng√†y nh·∫≠p h·ªçc:</label>
                    <span>{currentStudent.enrollmentDate}</span>
                  </div>
                  <div className="detail-item">
                    <label>T√¨nh tr·∫°ng s·ª©c kh·ªèe:</label>
                    <span
                      className={`health-status ${getHealthStatusClass(
                        currentStudent.healthStatus
                      )}`}
                    >
                      {currentStudent.healthStatus}
                    </span>
                  </div>
                  <div className="detail-item">
                    <label>D·ªã ·ª©ng:</label>
                    <span>{currentStudent.allergies}</span>
                  </div>
                  <div className="detail-item">
                    <label>Nh√≥m m√°u:</label>
                    <span>{currentStudent.bloodType}</span>
                  </div>
                  <div className="detail-item">
                    <label>Chi·ªÅu cao:</label>
                    <span>{currentStudent.height}</span>
                  </div>
                  <div className="detail-item">
                    <label>C√¢n n·∫∑ng:</label>
                    <span>{currentStudent.weight}</span>
                  </div>
                  <div className="detail-item">
                    <label>T√™n ph·ª• huynh:</label>
                    <span>{currentStudent.parentName}</span>
                  </div>
                  <div className="detail-item">
                    <label>SƒêT ph·ª• huynh:</label>
                    <span>{currentStudent.parentPhone}</span>
                  </div>
                  <div className="detail-item">
                    <label>SƒêT kh·∫©n c·∫•p:</label>
                    <span>{currentStudent.emergencyContact}</span>
                  </div>
                  <div className="detail-item">
                    <label>ƒê·ªãa ch·ªâ:</label>
                    <span>{currentStudent.address}</span>
                  </div>
                  <div className="detail-item full-width">
                    <label>Ghi ch√∫:</label>
                    <span>{currentStudent.notes}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default StudentList;
