import React, { useRef } from "react";
import { useCRUD, useFilter, useModal } from "../../utils/hooks/useCRUD";
import Table from "../../components/common/Table";
import Modal from "../../components/common/Modal";
import SearchFilters from "../../components/common/SearchFilters";
import "../../styles/main.scss";

function StudentListOptimized() {
  // Custom hooks
  const {
    data: students,
    loading,
    error,
    uploadFile,
  } = useCRUD([
    // Mock data moved to separate file or API
    {
      id: 1,
      studentId: "MN001",
      fullName: "Nguy·ªÖn VƒÉn An",
      dateOfBirth: "2020-05-15",
      gender: "Nam",
      className: "M·∫ßm",
      parentName: "Nguy·ªÖn Th·ªã Hoa",
      parentPhone: "0912345678",
      healthStatus: "B√¨nh th∆∞·ªùng",
      allergies: "Kh√¥ng",
    },
    // ... other mock data
  ]);

  const { filteredData, searchTerm, setSearchTerm, updateFilter } =
    useFilter(students);
  const { isOpen, mode, currentItem, openModal, closeModal } = useModal();
  const fileInputRef = useRef(null);

  // Configuration
  const API_ENDPOINT = ""; // API endpoint
  const classes = ["M·∫ßm", "Ch·ªìi", "L√° 1", "L√° 2", "L√° 3"];

  // Table columns configuration
  const columns = [
    { key: "studentId", header: "M√£ h·ªçc sinh", width: "10%" },
    {
      key: "fullName",
      header: "H·ªç v√† t√™n",
      width: "20%",
      render: (value, row) => (
        <div className="name-cell">
          <div className="user-avatar">{value.charAt(0)}</div>
          <span>{value}</span>
        </div>
      ),
    },
    { key: "className", header: "L·ªõp", width: "10%" },
    { key: "parentName", header: "Ph·ª• huynh", width: "20%" },
    { key: "parentPhone", header: "SƒêT", width: "15%" },
    {
      key: "healthStatus",
      header: "T√¨nh tr·∫°ng s·ª©c kh·ªèe",
      width: "15%",
      render: (value) => (
        <span className={`status-badge ${getHealthStatusClass(value)}`}>
          {value}
        </span>
      ),
    },
    {
      key: "actions",
      header: "Thao t√°c",
      width: "10%",
      render: (_, row) => (
        <div className="action-buttons">
          <button
            className="btn btn-sm btn-primary"
            onClick={() => openModal(row, "view")}
          >
            üëÅÔ∏è
          </button>
        </div>
      ),
    },
  ];

  // Filter configuration
  const filters = [
    {
      key: "className",
      placeholder: "Ch·ªçn l·ªõp",
      value: "",
      options: classes.map((cls) => ({ value: cls, label: cls })),
    },
  ];

  // Helper functions
  const getHealthStatusClass = (status) => {
    switch (status) {
      case "B√¨nh th∆∞·ªùng":
        return "status-success";
      case "C√≥ d·ªã ·ª©ng":
      case "C·∫ßn theo d√µi":
        return "status-warning";
      default:
        return "status-success";
    }
  };

  // File import handlers
  const handleFileImport = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    try {
      await uploadFile(API_ENDPOINT, file, { type: "student_import" });
      // Success handled by hook
    } catch (error) {
      console.error("Import error:", error);
    }

    event.target.value = "";
  };

  // Loading & Error states
  if (loading)
    return (
      <div className="container">
        <div className="loading-container">
          <p>ƒêang t·∫£i...</p>
        </div>
      </div>
    );
  if (error)
    return (
      <div className="container">
        <div className="error-container">
          <p>L·ªói: {error}</p>
        </div>
      </div>
    );

  return (
    <div className="container">
      {/* Page Header */}
      <div className="page-header">
        <div className="header-content">
          <h1>Danh S√°ch H·ªçc Sinh</h1>
          <p>Qu·∫£n l√Ω th√¥ng tin h·ªçc sinh m·∫ßm non</p>
        </div>
      </div>

      {/* Search & Filters */}
      <SearchFilters
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        filters={filters}
        onFilterChange={updateFilter}
        onImport={handleFileImport}
        importLoading={loading}
      />

      {/* Students Table */}
      <Table
        data={filteredData}
        columns={columns}
        loading={loading}
        emptyMessage="Kh√¥ng t√¨m th·∫•y h·ªçc sinh n√†o"
      />

      {/* Student Detail Modal */}
      <Modal
        isOpen={isOpen}
        onClose={closeModal}
        title="Th√¥ng Tin Chi Ti·∫øt H·ªçc Sinh"
      >
        {currentItem && (
          <div className="student-details">
            <div className="form-row">
              <div className="form-group">
                <label>M√£ h·ªçc sinh:</label>
                <p>{currentItem.studentId}</p>
              </div>
              <div className="form-group">
                <label>H·ªç v√† t√™n:</label>
                <p>{currentItem.fullName}</p>
              </div>
            </div>
            <div className="form-row">
              <div className="form-group">
                <label>Ng√†y sinh:</label>
                <p>{currentItem.dateOfBirth}</p>
              </div>
              <div className="form-group">
                <label>Gi·ªõi t√≠nh:</label>
                <p>{currentItem.gender}</p>
              </div>
            </div>
            <div className="form-row">
              <div className="form-group">
                <label>L·ªõp:</label>
                <p>{currentItem.className}</p>
              </div>
              <div className="form-group">
                <label>T√¨nh tr·∫°ng s·ª©c kh·ªèe:</label>
                <span
                  className={`status-badge ${getHealthStatusClass(
                    currentItem.healthStatus
                  )}`}
                >
                  {currentItem.healthStatus}
                </span>
              </div>
            </div>
            <div className="form-group">
              <label>Ph·ª• huynh:</label>
              <p>{currentItem.parentName}</p>
            </div>
            <div className="form-group">
              <label>S·ªë ƒëi·ªán tho·∫°i:</label>
              <p>{currentItem.parentPhone}</p>
            </div>
            <div className="form-group">
              <label>D·ªã ·ª©ng:</label>
              <p>{currentItem.allergies}</p>
            </div>
          </div>
        )}
      </Modal>

      {/* Hidden file input */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept=".xlsx,.xls,.csv"
        style={{ display: "none" }}
      />
    </div>
  );
}

export default StudentListOptimized;
