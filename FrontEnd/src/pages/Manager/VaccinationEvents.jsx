import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import '../../css/Manager/VaccinationEvents.css';
import { vaccinationEventService } from '../../services/vaccinationService';

function VaccinationEvents() {
  const navigate = useNavigate();

  // States for events management
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Loading states for different operations
  const [isCreating, setIsCreating] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isSendingEmail, setIsSendingEmail] = useState(false);

  // Modal states
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);

  // Email modal states
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [emailFormData, setEmailFormData] = useState({
    emailTemplateId: 3,
    customMessage: '',
  });

  // Email template options
  const emailTemplateOptions = [
    { id: 1, name: 'Y√äU C·∫¶U ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U' },
    { id: 2, name: 'TH√îNG B√ÅO B·∫¢O M·∫¨T' },
    { id: 3, name: 'TH√îNG B√ÅO S·ª∞ KI·ªÜN TI√äM CH·ª¶NG' },
  ];

  // Form data
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    eventDate: '',
    location: '',
  });

  // File upload states
  const [selectedFile, setSelectedFile] = useState(null);
  const [filePreview, setFilePreview] = useState(null);
  const fileInputRef = useRef(null);

  // Fetch vaccination events on component mount
  useEffect(() => {
    fetchVaccinationEvents();
  }, []);

  // Fetch all vaccination events
  const fetchVaccinationEvents = async () => {
    try {
      setLoading(true);
      setError('');
      const response = await vaccinationEventService.getAllEvents();
      setEvents(response);
    } catch (error) {
      console.error('Error fetching vaccination events:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·ª± ki·ªán ti√™m ch·ªßng');
    } finally {
      setLoading(false);
    }
  };

  // Handle form input changes
  const handleInputChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  // Handle create new event
  const handleCreateEvent = () => {
    setFormData({
      title: '',
      description: '',
      eventDate: '',
      location: '',
    });
    clearFileData();
    setShowCreateModal(true);
  };

  // Handle edit event
  const handleEditEvent = event => {
    setSelectedEvent(event);
    // Convert date back to YYYY-MM-DD format for date input
    let dateValue = '';
    if (event.eventDate) {
      // If it's already in DD/MM/YYYY format, convert it
      const parts = event.eventDate.split('/');
      if (parts.length === 3) {
        dateValue = `${parts[2]}-${parts[1].padStart(
          2,
          '0'
        )}-${parts[0].padStart(2, '0')}`;
      }
    }

    setFormData({
      title: event.title || '',
      description: event.description || '',
      eventDate: dateValue,
      location: event.location || '',
    });
    setShowEditModal(true);
  };

  // Handle delete event
  const handleDeleteEvent = event => {
    setSelectedEvent(event);
    setShowDeleteModal(true);
  };

  // Handle view students for event
  const handleViewStudents = event => {
    navigate(`/manager/vaccination-events/${event.id}/students`);
  };

  // Handle send email to all parents
  const handleSendEmailAll = event => {
    setSelectedEvent(event);
    setEmailFormData({
      emailTemplateId: 3,
      customMessage: '',
    });
    setShowEmailModal(true);
  };

  // Handle email form input changes
  const handleEmailInputChange = e => {
    const { name, value } = e.target;
    setEmailFormData(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  // Handle file selection
  const handleFileSelect = e => {
    const file = e.target.files[0];
    if (file) {
      // Validate file type
      if (
        !file.type.startsWith('image/') &&
        !file.type.includes('pdf') &&
        !file.type.includes('document')
      ) {
        alert('Vui l√≤ng ch·ªçn file h√¨nh ·∫£nh, PDF ho·∫∑c t√†i li·ªáu!');
        return;
      }

      // Validate file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        alert('File kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 10MB!');
        return;
      }

      setSelectedFile(file);

      // Create preview for images
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = e => {
          setFilePreview(e.target.result);
        };
        reader.readAsDataURL(file);
      } else {
        setFilePreview(null);
      }
    }
  };

  // Remove selected file
  const removeSelectedFile = () => {
    setSelectedFile(null);
    setFilePreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Clear file data when modal closes
  const clearFileData = () => {
    setSelectedFile(null);
    setFilePreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Submit send email form
  const handleSubmitSendEmail = async e => {
    e.preventDefault();

    if (!selectedEvent) return;

    setIsSendingEmail(true);
    try {
      const emailData = {
        vaccinationEventId: selectedEvent.id,
        emailTemplateId: parseInt(emailFormData.emailTemplateId),
        customMessage: emailFormData.customMessage.trim() || 'string',
      };

      console.log('üöÄ Sending email to all parents:', emailData);
      await vaccinationEventService.sendEmailToAll(emailData);
      setShowEmailModal(false);
      alert('G·ª≠i email th√†nh c√¥ng t·ªõi t·∫•t c·∫£ ph·ª• huynh!');
    } catch (error) {
      console.error('Error sending email:', error);
      alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i email!');
    } finally {
      setIsSendingEmail(false);
    }
  };

  // Submit create form
  const handleSubmitCreate = async e => {
    e.preventDefault();

    // Validation
    if (!formData.title.trim()) {
      alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ s·ª± ki·ªán!');
      return;
    }
    if (!formData.eventDate) {
      alert('Vui l√≤ng ch·ªçn ng√†y ti√™m!');
      return;
    }

    setIsCreating(true);
    try {
      // Create FormData for file upload
      const formDataToSend = new FormData();
      formDataToSend.append('VaccinationEventName', formData.title.trim());
      formDataToSend.append('Location', formData.location.trim() || 'string');
      formDataToSend.append('OrganizedBy', 'string');
      formDataToSend.append('EventDate', formData.eventDate + 'T00:00:00.000Z');
      formDataToSend.append(
        'Description',
        formData.description.trim() || 'string'
      );

      // Add file if selected
      if (selectedFile) {
        formDataToSend.append('DocumentFile', selectedFile);
      }

      console.log('üöÄ Sending event data with file:', {
        title: formData.title.trim(),
        location: formData.location.trim() || 'string',
        eventDate: formData.eventDate,
        description: formData.description.trim() || 'string',
        hasFile: !!selectedFile,
        fileName: selectedFile?.name,
      });

      await vaccinationEventService.createEventWithFile(formDataToSend);
      await fetchVaccinationEvents();
      setShowCreateModal(false);
      clearFileData();
      alert('T·∫°o s·ª± ki·ªán ti√™m ch·ªßng th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error creating vaccination event:', error);
      alert('C√≥ l·ªói x·∫£y ra khi t·∫°o s·ª± ki·ªán ti√™m ch·ªßng!');
    } finally {
      setIsCreating(false);
    }
  };

  // Submit edit form
  const handleSubmitEdit = async e => {
    e.preventDefault();

    if (!selectedEvent) return;

    setIsUpdating(true);
    try {
      // Format data according to API requirements for PUT
      const eventData = {
        vaccinationEventId: selectedEvent.id,
        vaccinationEventName: formData.title.trim(),
        location: formData.location.trim() || 'string',
        organizedBy: 'string', // As per API structure
        eventDate: formData.eventDate + 'T00:00:00.000Z', // Convert to ISO format
        description: formData.description.trim() || 'string',
      };

      console.log('üöÄ Sending updated event data:', eventData);
      await vaccinationEventService.updateEvent(eventData);
      await fetchVaccinationEvents();
      setShowEditModal(false);
      alert('C·∫≠p nh·∫≠t s·ª± ki·ªán ti√™m ch·ªßng th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error updating vaccination event:', error);
      alert('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·ª± ki·ªán ti√™m ch·ªßng!');
    } finally {
      setIsUpdating(false);
    }
  };

  // Confirm delete
  const handleConfirmDelete = async () => {
    if (!selectedEvent) return;

    setIsDeleting(true);
    try {
      await vaccinationEventService.deleteEvent(selectedEvent.id);
      await fetchVaccinationEvents();
      setShowDeleteModal(false);
      alert('X√≥a s·ª± ki·ªán ti√™m ch·ªßng th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error deleting vaccination event:', error);
      alert('C√≥ l·ªói x·∫£y ra khi x√≥a s·ª± ki·ªán ti√™m ch·ªßng!');
    } finally {
      setIsDeleting(false);
    }
  };

  if (loading) {
    return (
      <div className="vaccination-events-container">
        <div className="loading-state">
          <p>‚è≥ ƒêang t·∫£i danh s√°ch s·ª± ki·ªán ti√™m ch·ªßng...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="vaccination-events-container">
        <div className="error-state">
          <p>‚ùå {error}</p>
          <button onClick={fetchVaccinationEvents} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="vaccination-events-container">
      {/* Header */}
      <div className="page-header">
        <div className="header-content">
          <h1>üíâ Qu·∫£n L√Ω S·ª± Ki·ªán Ti√™m Ch·ªßng</h1>
          <p>T·∫°o v√† qu·∫£n l√Ω c√°c ƒë·ª£t ti√™m vaccine cho h·ªçc sinh</p>
        </div>
        <div className="header-actions">
          <button onClick={handleCreateEvent} className="create-btn">
            ‚ûï T·∫°o s·ª± ki·ªán m·ªõi
          </button>
        </div>
      </div>

      {/* Statistics */}
      <div className="stats-row">
        <div className="stat-card">
          <div className="stat-icon">üìÖ</div>
          <div className="stat-content">
            <h3>{events.length}</h3>
            <p>T·ªïng s·ª± ki·ªán</p>
          </div>
        </div>
      </div>

      {/* Events List */}
      <div className="events-section">
        <h2>üìã Danh s√°ch s·ª± ki·ªán</h2>

        {events.length > 0 ? (
          <div className="events-grid">
            {events.map(event => (
              <div key={event.id} className="event-card">
                <div
                  className="card-header"
                  onClick={() => handleViewStudents(event)}
                >
                  <h3>{event.title}</h3>
                  <span className="click-hint">üë• Xem danh s√°ch h·ªçc sinh</span>
                </div>

                <div className="card-body">
                  <div className="event-info">
                    <div className="info-row">
                      <span className="label">üìÖ Ng√†y ti√™m:</span>
                      <span className="value">{event.eventDate}</span>
                    </div>
                    <div className="info-row">
                      <span className="label">üìç ƒê·ªãa ƒëi·ªÉm:</span>
                      <span className="value">
                        {event.location || 'Ch∆∞a c√≥'}
                      </span>
                    </div>
                    <div className="info-row">
                      <span className="label">üë®‚Äçüíº T·ªï ch·ª©c:</span>
                      <span className="value">
                        {event.organizedBy || 'admin'}
                      </span>
                    </div>
                  </div>

                  {event.description && (
                    <div className="event-description">
                      <p>{event.description}</p>
                    </div>
                  )}
                </div>

                <div className="card-footer">
                  <button
                    className="edit-btn"
                    onClick={() => handleEditEvent(event)}
                  >
                    Ch·ªânh s·ª≠a
                  </button>
                  <button
                    className="email-btn"
                    onClick={() => handleSendEmailAll(event)}
                  >
                    G·ª≠i email
                  </button>
                  <button
                    className="delete-btn"
                    onClick={() => handleDeleteEvent(event)}
                  >
                    X√≥a
                  </button>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="no-events">
            <div className="no-events-icon">üíâ</div>
            <p>Ch∆∞a c√≥ s·ª± ki·ªán ti√™m ch·ªßng n√†o</p>
            <button onClick={handleCreateEvent} className="create-first-btn">
              ‚ûï T·∫°o s·ª± ki·ªán ƒë·∫ßu ti√™n
            </button>
          </div>
        )}
      </div>

      {/* Create Modal */}
      {showCreateModal && (
        <div
          className="modal-overlay"
          onClick={() => {
            setShowCreateModal(false);
            clearFileData();
          }}
        >
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>‚ûï T·∫°o S·ª± Ki·ªán Ti√™m Ch·ªßng M·ªõi</h3>
              <button
                className="modal-close"
                onClick={() => {
                  setShowCreateModal(false);
                  clearFileData();
                }}
              >
                √ó
              </button>
            </div>

            <form onSubmit={handleSubmitCreate} className="modal-body">
              <div className="form-group">
                <label>T√™n s·ª± ki·ªán ti√™m ch·ªßng *</label>
                <input
                  type="text"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  placeholder="VD: Ti√™m vaccine COVID-19 ƒë·ª£t 1"
                  required
                />
              </div>

              <div className="form-group">
                <label>M√¥ t·∫£ s·ª± ki·ªán</label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± ki·ªán ti√™m ch·ªßng..."
                  rows="3"
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y ti√™m *</label>
                  <input
                    type="date"
                    name="eventDate"
                    value={formData.eventDate}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>ƒê·ªãa ƒëi·ªÉm ti√™m</label>
                  <input
                    type="text"
                    name="location"
                    value={formData.location}
                    onChange={handleInputChange}
                    placeholder="VD: Ph√≤ng y t·∫ø tr∆∞·ªùng"
                  />
                </div>
              </div>

              {/* File Upload Section */}
              <div className="form-group">
                <label>T√†i li·ªáu ƒë√≠nh k√®m (t√πy ch·ªçn)</label>
                <div className="file-upload-section">
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*,.pdf,.doc,.docx,.txt"
                    onChange={handleFileSelect}
                    style={{ display: 'none' }}
                  />
                  <button
                    type="button"
                    onClick={() => fileInputRef.current?.click()}
                    className="file-select-btn"
                  >
                    üìÅ Ch·ªçn t√†i li·ªáu
                  </button>
                  {selectedFile && (
                    <div className="file-preview">
                      <div className="file-info">
                        <span className="file-name">
                          üìÑ {selectedFile.name}
                        </span>
                        <span className="file-size">
                          ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)
                        </span>
                        <button
                          type="button"
                          onClick={removeSelectedFile}
                          className="remove-file-btn"
                        >
                          ‚ùå
                        </button>
                      </div>
                      {filePreview && (
                        <div className="image-preview">
                          <img src={filePreview} alt="Preview" />
                        </div>
                      )}
                    </div>
                  )}
                </div>
                <small className="file-help">
                  H·ªó tr·ª£: H√¨nh ·∫£nh, PDF, Word, Text. T·ªëi ƒëa 10MB
                </small>
              </div>

              <div className="modal-footer">
                <button
                  type="button"
                  onClick={() => {
                    setShowCreateModal(false);
                    clearFileData();
                  }}
                  className="cancel-btn"
                  disabled={isCreating}
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="submit-btn"
                  disabled={isCreating}
                >
                  {isCreating ? (
                    <>
                      <span className="loading-spinner">‚è≥</span>
                      ƒêang t·∫°o...
                    </>
                  ) : (
                    '‚ûï T·∫°o s·ª± ki·ªán'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Edit Modal */}
      {showEditModal && selectedEvent && (
        <div className="modal-overlay" onClick={() => setShowEditModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>‚úèÔ∏è Ch·ªânh S·ª≠a S·ª± Ki·ªán Ti√™m Ch·ªßng</h3>
              <button
                className="modal-close"
                onClick={() => setShowEditModal(false)}
              >
                √ó
              </button>
            </div>

            <form onSubmit={handleSubmitEdit} className="modal-body">
              <div className="form-group">
                <label>T√™n s·ª± ki·ªán ti√™m ch·ªßng *</label>
                <input
                  type="text"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-group">
                <label>M√¥ t·∫£ s·ª± ki·ªán</label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  rows="3"
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y ti√™m *</label>
                  <input
                    type="date"
                    name="eventDate"
                    value={formData.eventDate}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>ƒê·ªãa ƒëi·ªÉm ti√™m</label>
                  <input
                    type="text"
                    name="location"
                    value={formData.location}
                    onChange={handleInputChange}
                  />
                </div>
              </div>

              <div className="modal-footer">
                <button
                  type="button"
                  onClick={() => setShowEditModal(false)}
                  className="cancel-btn"
                  disabled={isUpdating}
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="submit-btn"
                  disabled={isUpdating}
                >
                  {isUpdating ? (
                    <>
                      <span className="loading-spinner">‚è≥</span>
                      ƒêang c·∫≠p nh·∫≠t...
                    </>
                  ) : (
                    'C·∫≠p nh·∫≠t'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && selectedEvent && (
        <div
          className="modal-overlay"
          onClick={() => setShowDeleteModal(false)}
        >
          <div
            className="modal-content delete-modal"
            onClick={e => e.stopPropagation()}
          >
            <div className="modal-header">
              <h3>üóëÔ∏è X√°c Nh·∫≠n X√≥a</h3>
              <button
                className="modal-close"
                onClick={() => setShowDeleteModal(false)}
              >
                √ó
              </button>
            </div>

            <div className="modal-body">
              <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·ª± ki·ªán ti√™m ch·ªßng n√†y?</p>
              <div className="delete-info">
                <strong>{selectedEvent.title}</strong>
                <br />
                <small>Ng√†y: {selectedEvent.eventDate}</small>
                <br />
                <small>ƒê·ªãa ƒëi·ªÉm: {selectedEvent.location}</small>
              </div>
              <p className="warning">‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!</p>
            </div>

            <div className="modal-footer">
              <button
                onClick={() => setShowDeleteModal(false)}
                className="cancel-btn"
                disabled={isDeleting}
              >
                H·ªßy
              </button>
              <button
                onClick={handleConfirmDelete}
                className="delete-confirm-btn"
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <>
                    <span className="loading-spinner">‚è≥</span>
                    ƒêang x√≥a...
                  </>
                ) : (
                  'üóëÔ∏è X√≥a'
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Send Email Modal */}
      {showEmailModal && selectedEvent && (
        <div className="modal-overlay" onClick={() => setShowEmailModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üìß G·ª≠i Email Th√¥ng B√°o</h3>
              <button
                className="modal-close"
                onClick={() => setShowEmailModal(false)}
              >
                √ó
              </button>
            </div>

            <form onSubmit={handleSubmitSendEmail} className="modal-body">
              <div className="email-info">
                <h4>S·ª± ki·ªán: {selectedEvent.title}</h4>
                <p>
                  üìÖ Ng√†y: {selectedEvent.eventDate} | üìç ƒê·ªãa ƒëi·ªÉm:{' '}
                  {selectedEvent.location}
                </p>
              </div>

              <div className="form-group">
                <label>Ch·ªçn Template Email *</label>
                <select
                  name="emailTemplateId"
                  value={emailFormData.emailTemplateId}
                  onChange={handleEmailInputChange}
                  required
                  className="template-select"
                >
                  {emailTemplateOptions.map(template => (
                    <option
                      key={template.id}
                      value={template.id}
                      disabled={template.id !== 3}
                    >
                      {template.name} (ID: {template.id})
                      {template.id !== 3 ? ' - Kh√¥ng kh·∫£ d·ª•ng' : ''}
                    </option>
                  ))}
                </select>
                <small>Ch·ªçn template ph√π h·ª£p cho th√¥ng b√°o</small>
              </div>

              <div className="form-group">
                <label>Tin nh·∫Øn t√πy ch·ªânh</label>
                <textarea
                  name="customMessage"
                  value={emailFormData.customMessage}
                  onChange={handleEmailInputChange}
                  placeholder="Nh·∫≠p tin nh·∫Øn b·ªï sung cho ph·ª• huynh..."
                  rows="4"
                />
              </div>

              <div className="email-preview">
                <h5>üìã Th√¥ng tin g·ª≠i:</h5>
                <p>
                  <strong>ƒê·ªëi t∆∞·ª£ng:</strong> T·∫•t c·∫£ ph·ª• huynh c√≥ con tham gia
                  s·ª± ki·ªán
                </p>
                <p>
                  <strong>Template:</strong> ID {emailFormData.emailTemplateId}
                </p>
                <p>
                  <strong>S·ª± ki·ªán:</strong> {selectedEvent.title}
                </p>
              </div>

              <div className="modal-footer">
                <button
                  type="button"
                  onClick={() => setShowEmailModal(false)}
                  className="cancel-btn"
                  disabled={isSendingEmail}
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="send-email-btn"
                  disabled={isSendingEmail}
                >
                  {isSendingEmail ? (
                    <>
                      <span className="loading-spinner">‚è≥</span>
                      ƒêang g·ª≠i...
                    </>
                  ) : (
                    'üìß G·ª≠i Email'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default VaccinationEvents;
