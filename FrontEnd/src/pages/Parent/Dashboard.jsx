import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  useParentNotifications,
  useParentBlogs,
} from "../../utils/hooks/useParent";
import "../../css/Parent/Dashboard.css";

function ParentDashboard() {
  const navigate = useNavigate();
  const [quickStats, setQuickStats] = useState([]);

  // Get real data from APIs
  const { data: notifications, loading: notificationsLoading } =
    useParentNotifications();
  const { data: blogs, loading: blogsLoading } = useParentBlogs();

  // Mock data for features not yet available via API
  const studentInfo = {
    name: "Nguy·ªÖn Minh Kh√¥i",
    class: "5A",
    studentId: "HS001",
    school: "Tr∆∞·ªùng Ti·ªÉu h·ªçc Nguy·ªÖn Du",
  };

  const healthSummary = {
    lastCheckup: "2024-03-10",
    nextCheckup: "2024-06-10",
    vaccinationStatus: "ƒê·∫ßy ƒë·ªß",
    healthStatus: "Kh·ªèe m·∫°nh",
  };

  // Calculate real statistics
  useEffect(() => {
    const calculateStats = () => {
      const totalNotifications = notifications ? notifications.length : 0;
      const unreadNotifications = notifications
        ? notifications.filter((n) => !n.isRead).length
        : 0;
      const totalBlogs = blogs ? blogs.length : 0;

      const stats = [
        {
          title: "Th√¥ng b√°o m·ªõi",
          value: unreadNotifications.toString(),
          icon: "üîî",
          color: "stat-notification",
        },
        {
          title: "T·ªïng th√¥ng b√°o",
          value: totalNotifications.toString(),
          icon: "üì¨",
          color: "stat-health",
        },
        {
          title: "B√†i vi·∫øt s·ª©c kh·ªèe",
          value: totalBlogs.toString(),
          icon: "üì∞",
          color: "stat-vaccine",
        },
        {
          title: "Tin nh·∫Øn ch∆∞a ƒë·ªçc",
          value: "1", // Mock data - chat API not available
          icon: "üí¨",
          color: "stat-message",
        },
      ];

      setQuickStats(stats);
    };

    if (!notificationsLoading && !blogsLoading) {
      calculateStats();
    }
  }, [notifications, blogs, notificationsLoading, blogsLoading]);

  // Get recent notifications from real data
  const getRecentNotifications = () => {
    if (!notifications || notifications.length === 0) {
      // Return mock data if no real notifications
      return [
        {
          id: 1,
          title: "L·ªãch ti√™m vaccine m·ªõi",
          content:
            "Th√¥ng b√°o l·ªãch ti√™m vaccine s·ªüi - rubella cho h·ªçc sinh l·ªõp 5",
          date: "2024-03-15",
          type: "vaccination",
        },
        {
          id: 2,
          title: "K·∫øt qu·∫£ kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥",
          content: "K·∫øt qu·∫£ kh√°m s·ª©c kh·ªèe c·ªßa con em ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
          date: "2024-03-12",
          type: "health",
        },
      ];
    }

    // Use real notifications data
    return notifications
      .sort(
        (a, b) =>
          new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)
      )
      .slice(0, 3)
      .map((notification) => ({
        id: notification.id,
        title: notification.title,
        content: notification.content,
        date: notification.date,
        type: notification.type,
        isRead: notification.isRead,
      }));
  };

  const handleViewAllNotifications = () => {
    navigate("/parent/notifications");
  };

  const handleViewBlogs = () => {
    navigate("/parent/blogs");
  };

  const handleViewHealthHistory = () => {
    navigate("/parent/health-history");
  };

  const handleConsultation = () => {
    navigate("/parent/consultation");
  };

  const handleChatWithNurse = () => {
    navigate("/parent/chat");
  };



  return (
    <div className="parent-dashboard-container">
      {/* Header */}
      <div className="dashboard-header">
        <div className="header-content">
          <h1>Ch√†o m·ª´ng, Ph·ª• Huynh!</h1>
          <p>Theo d√µi s·ª©c kh·ªèe v√† th√¥ng tin h·ªçc t·∫≠p c·ªßa con em</p>
        </div>
        <div className="header-date">
          <span>
            {new Date().toLocaleDateString("vi-VN", {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric",
            })}
          </span>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="stats-grid">
        {notificationsLoading || blogsLoading ? (
          <div className="loading-stats">
            <p>‚è≥ ƒêang t·∫£i th·ªëng k√™...</p>
          </div>
        ) : (
          quickStats.map((stat, index) => (
            <div key={index} className={`stat-card ${stat.color}`}>
              <div className="stat-icon">{stat.icon}</div>
              <div className="stat-content">
                <h3>{stat.value}</h3>
                <p>{stat.title}</p>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Main Content Grid */}
      <div className="main-content-grid">
        {/* Student Information */}
        <div className="info-card">
          <div className="card-header">
            <h3>üë¶ Th√¥ng Tin H·ªçc Sinh</h3>
          </div>
          <div className="card-content">
            <div className="student-info">
              <div className="info-item">
                <label>H·ªç v√† t√™n:</label>
                <span>{studentInfo.name}</span>
              </div>
              <div className="info-item">
                <label>L·ªõp:</label>
                <span>{studentInfo.class}</span>
              </div>
              <div className="info-item">
                <label>M√£ h·ªçc sinh:</label>
                <span>{studentInfo.studentId}</span>
              </div>
              <div className="info-item">
                <label>Tr∆∞·ªùng:</label>
                <span>{studentInfo.school}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Health Summary */}
        <div className="info-card">
          <div className="card-header">
            <h3>üè• T√≥m T·∫Øt S·ª©c Kh·ªèe</h3>
          </div>
          <div className="card-content">
            <div className="health-summary">
              <div className="info-item">
                <label>Kh√°m g·∫ßn nh·∫•t:</label>
                <span>{healthSummary.lastCheckup}</span>
              </div>
              <div className="info-item">
                <label>Kh√°m ti·∫øp theo:</label>
                <span>{healthSummary.nextCheckup}</span>
              </div>
              <div className="info-item">
                <label>T√¨nh tr·∫°ng vaccine:</label>
                <span className="status-complete">
                  {healthSummary.vaccinationStatus}
                </span>
              </div>
              <div className="info-item">
                <label>T√¨nh tr·∫°ng s·ª©c kh·ªèe:</label>
                <span className="status-healthy">
                  {healthSummary.healthStatus}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Recent Notifications */}
        <div className="info-card notifications-card">
          <div className="card-header">
            <h3>üîî Th√¥ng B√°o G·∫ßn ƒê√¢y</h3>
            <button
              className="view-all-btn"
              onClick={handleViewAllNotifications}
            >
              Xem t·∫•t c·∫£
            </button>
          </div>
          <div className="card-content">
            <div className="notifications-list">
              {getRecentNotifications().map((notification) => (
                <div
                  key={notification.id}
                  className={`notification-item ${notification.type} ${
                    !notification.isRead ? "unread" : ""
                  }`}
                >
                  <div className="notification-content">
                    <h4>{notification.title}</h4>
                    <p>{notification.content}</p>
                    <span className="notification-date">
                      {notification.date}
                    </span>
                  </div>
                  <div className="notification-action">
                    <button className="read-btn">ƒê·ªçc</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="quick-actions">
        <h3>‚ö° Thao T√°c Nhanh</h3>
        <div className="actions-grid">
          <button
            className="action-btn health-btn"
            onClick={handleViewHealthHistory}
          >
            <span className="action-icon">üìã</span>
            <span>Xem H·ªì S∆° S·ª©c Kh·ªèe</span>
          </button>
          <button
            className="action-btn consultation-btn"
            onClick={handleConsultation}
          >
            <span className="action-icon">üí¨</span>
            <span>ƒê·∫∑t L·ªãch T∆∞ V·∫•n</span>
          </button>
          <button className="action-btn chat-btn" onClick={handleChatWithNurse}>
            <span className="action-icon">üó®Ô∏è</span>
            <span>Chat V·ªõi Y T√°</span>
          </button>
          <button className="action-btn blog-btn" onClick={handleViewBlogs}>
            <span className="action-icon">üì∞</span>
            <span>ƒê·ªçc Blog S·ª©c Kh·ªèe</span>
          </button>
          <button className="action-btn donate-btn" onClick={handleDonateMedicine}>
            <span className="action-icon">üíä</span>
            <span>Quy√™n G√≥p Thu·ªëc</span>
          </button>
        </div>
      </div>
    </div>
  );
}

export default ParentDashboard;
