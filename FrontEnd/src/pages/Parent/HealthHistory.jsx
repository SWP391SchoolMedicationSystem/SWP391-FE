import React, { useState } from "react";
import "../../css/Parent/HealthHistory.css";
import { useParentHealthRecords } from "../../utils/hooks/useParent";

function HealthHistory() {
  const [selectedFilter, setSelectedFilter] = useState("all");
  const [selectedStudent, setSelectedStudent] = useState("all");

  // Get student ID (you might want to get this from context or user info)
  const currentStudentId = "HS001"; // This should come from user context or props

  // Use API hooks
  const {
    data: healthRecords,
    loading,
    error,
    refetch,
  } = useParentHealthRecords(
    selectedStudent === "all" ? currentStudentId : selectedStudent
  );

  const students = [
    { id: "all", name: "T·∫•t c·∫£ con em" },
    { id: "HS001", name: "Nguy·ªÖn Minh Kh√¥i" },
    // C√≥ th·ªÉ th√™m nhi·ªÅu con
  ];

  const filterTypes = [
    { id: "all", name: "T·∫•t c·∫£", icon: "üìã" },
    { id: "completed", name: "ƒê√£ kh√°m", icon: "‚úÖ" },
    { id: "scheduled", name: "ƒê√£ l√™n l·ªãch", icon: "üìÖ" },
  ];

  const filteredRecords = healthRecords
    ? healthRecords.filter((record) => {
        const matchesFilter =
          selectedFilter === "all" || record.status === selectedFilter;
        const matchesStudent =
          selectedStudent === "all" || record.studentId === selectedStudent;
        return matchesFilter && matchesStudent;
      })
    : [];

  const getStatusColor = (status) => {
    const colors = {
      completed: "#e8f5e8",
      scheduled: "#fff3e0",
    };
    return colors[status] || "#f5f5f5";
  };

  const getStatusText = (status) => {
    const texts = {
      completed: "ƒê√£ ho√†n th√†nh",
      scheduled: "ƒê√£ l√™n l·ªãch",
    };
    return texts[status] || status;
  };

  return (
    <div className="health-history-container">
      {/* Header */}
      <div className="page-header">
        <div className="header-content">
          <h1>üè• L·ªãch S·ª≠ Kh√°m S·ª©c Kh·ªèe</h1>
          <p>Theo d√µi l·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe c·ªßa con em</p>
        </div>
        <button className="export-btn">üìä Xu·∫•t b√°o c√°o</button>
      </div>

      {/* Filters */}
      <div className="filters-section">
        <div className="filter-group">
          <label>H·ªçc sinh:</label>
          <select
            value={selectedStudent}
            onChange={(e) => setSelectedStudent(e.target.value)}
            className="filter-select"
          >
            {students.map((student) => (
              <option key={student.id} value={student.id}>
                {student.name}
              </option>
            ))}
          </select>
        </div>

        <div className="filter-buttons">
          {filterTypes.map((filter) => (
            <button
              key={filter.id}
              className={`filter-btn ${
                selectedFilter === filter.id ? "active" : ""
              }`}
              onClick={() => setSelectedFilter(filter.id)}
            >
              <span className="filter-icon">{filter.icon}</span>
              <span>{filter.name}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Loading State */}
      {loading && (
        <div className="loading-state">
          <p>‚è≥ ƒêang t·∫£i l·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe...</p>
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="error-state">
          <p>‚ùå L·ªói khi t·∫£i l·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe: {error}</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      )}

      {/* Empty State */}
      {!loading && !error && (!healthRecords || healthRecords.length === 0) && (
        <div className="empty-state">
          <p>üì≠ Ch∆∞a c√≥ l·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe n√†o</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ T·∫£i l·∫°i
          </button>
        </div>
      )}

      {/* Content */}
      {!loading && !error && healthRecords && healthRecords.length > 0 && (
        <>
          {/* Statistics Cards */}
          <div className="stats-cards">
            <div className="stat-card">
              <div className="stat-icon">üìã</div>
              <div className="stat-content">
                <h3>
                  {healthRecords.filter((r) => r.status === "completed").length}
                </h3>
                <p>L·∫ßn kh√°m ƒë√£ ho√†n th√†nh</p>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">üìÖ</div>
              <div className="stat-content">
                <h3>
                  {healthRecords.filter((r) => r.status === "scheduled").length}
                </h3>
                <p>L·ªãch kh√°m s·∫Øp t·ªõi</p>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">üìà</div>
              <div className="stat-content">
                <h3>32kg</h3>
                <p>C√¢n n·∫∑ng hi·ªán t·∫°i</p>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">üìè</div>
              <div className="stat-content">
                <h3>135cm</h3>
                <p>Chi·ªÅu cao hi·ªán t·∫°i</p>
              </div>
            </div>
          </div>

          {/* Health Records List */}
          <div className="records-list">
            {filteredRecords.length > 0 ? (
              filteredRecords.map((record) => (
                <div key={record.id} className="record-card">
                  <div className="record-header">
                    <div className="record-basic-info">
                      <h3>{record.studentName}</h3>
                      <span className="record-date">
                        üìÖ {record.checkupDate}
                      </span>
                      <span className="record-type">{record.checkupType}</span>
                    </div>
                    <div
                      className="record-status"
                      style={{ backgroundColor: getStatusColor(record.status) }}
                    >
                      {getStatusText(record.status)}
                    </div>
                  </div>

                  {record.status === "completed" && (
                    <div className="record-details">
                      <div className="record-doctor">
                        <strong>üë®‚Äç‚öïÔ∏è B√°c sƒ© kh√°m:</strong> {record.doctor}
                      </div>

                      <div className="health-metrics">
                        <div className="metric-group">
                          <div className="metric-item">
                            <label>Chi·ªÅu cao:</label>
                            <span>{record.height}</span>
                          </div>
                          <div className="metric-item">
                            <label>C√¢n n·∫∑ng:</label>
                            <span>{record.weight}</span>
                          </div>
                          <div className="metric-item">
                            <label>Huy·∫øt √°p:</label>
                            <span>{record.bloodPressure}</span>
                          </div>
                          <div className="metric-item">
                            <label>Nh·ªãp tim:</label>
                            <span>{record.heartRate}</span>
                          </div>
                          <div className="metric-item">
                            <label>Th√¢n nhi·ªát:</label>
                            <span>{record.temperature}</span>
                          </div>
                        </div>
                      </div>

                      <div className="health-assessment">
                        <div className="assessment-item">
                          <label>T√¨nh tr·∫°ng s·ª©c kh·ªèe t·ªïng qu√°t:</label>
                          <span
                            className={
                              record.generalHealth === "Kh·ªèe m·∫°nh"
                                ? "status-healthy"
                                : "status-warning"
                            }
                          >
                            {record.generalHealth}
                          </span>
                        </div>

                        <div className="assessment-item">
                          <label>Ghi ch√∫:</label>
                          <p>{record.notes}</p>
                        </div>

                        <div className="assessment-item">
                          <label>Khuy·∫øn ngh·ªã:</label>
                          <p>{record.recommendations}</p>
                        </div>
                      </div>
                    </div>
                  )}

                  {record.status === "scheduled" && (
                    <div className="scheduled-info">
                      <p>üìÖ L·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch</p>
                      <p>üë®‚Äç‚öïÔ∏è B√°c sƒ© ph·ª• tr√°ch: {record.doctor}</p>
                      <div className="scheduled-actions">
                        <button className="remind-btn">üîî Nh·∫Øc nh·ªü</button>
                        <button className="reschedule-btn">üìÖ ƒê·ªïi l·ªãch</button>
                      </div>
                    </div>
                  )}
                </div>
              ))
            ) : (
              <div className="no-records">
                <p>üì≠ Kh√¥ng c√≥ h·ªì s∆° n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc</p>
                <button
                  onClick={() => {
                    setSelectedFilter("all");
                    setSelectedStudent("all");
                  }}
                  className="retry-btn"
                >
                  üîÑ ƒê·∫∑t l·∫°i b·ªô l·ªçc
                </button>
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
}

export default HealthHistory;
