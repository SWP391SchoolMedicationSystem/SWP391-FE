import React, { useState } from "react";
import "../../css/Parent/Notifications.css";

function Notifications() {
  const [selectedFilter, setSelectedFilter] = useState("all");
  const [showUnreadOnly, setShowUnreadOnly] = useState(false);

  // Mock data cho th√¥ng b√°o
  const notifications = [
    {
      id: 1,
      title: "L·ªãch ti√™m vaccine s·ªüi - rubella cho h·ªçc sinh l·ªõp 5",
      content:
        "Th√¥ng b√°o v·ªÅ l·ªãch ti√™m vaccine s·ªüi - rubella d√†nh cho c√°c em h·ªçc sinh l·ªõp 5. Th·ªùi gian: 8h00 ng√†y 20/03/2024. ƒê·ªãa ƒëi·ªÉm: Ph√≤ng y t·∫ø tr∆∞·ªùng. Ph·ª• huynh l∆∞u √Ω cho con em ƒÉn s√°ng ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi ƒë·∫øn tr∆∞·ªùng.",
      type: "vaccination",
      priority: "high",
      date: "2024-03-15",
      time: "08:30",
      isRead: false,
      sender: "Y t·∫ø tr∆∞·ªùng",
    },
    {
      id: 2,
      title: "K·∫øt qu·∫£ kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥",
      content:
        "K·∫øt qu·∫£ kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ c·ªßa con em ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. T√¨nh tr·∫°ng s·ª©c kh·ªèe: B√¨nh th∆∞·ªùng. Chi·ªÅu cao: 135cm, C√¢n n·∫∑ng: 32kg. Ph·ª• huynh c√≥ th·ªÉ xem chi ti·∫øt t·∫°i m·ª•c L·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe.",
      type: "health",
      priority: "medium",
      date: "2024-03-12",
      time: "14:20",
      isRead: true,
      sender: "BS. Nguy·ªÖn Th·ªã Lan",
    },
    {
      id: 3,
      title: "S·ª± ki·ªán: Ng√†y h·ªôi s·ª©c kh·ªèe h·ªçc ƒë∆∞·ªùng 2024",
      content:
        "Tr∆∞·ªùng t·ªï ch·ª©c Ng√†y h·ªôi s·ª©c kh·ªèe h·ªçc ƒë∆∞·ªùng 2024. Th·ªùi gian: 8h00-16h00 ng√†y 25/03/2024. C√°c ho·∫°t ƒë·ªông: T·∫≠p th·ªÉ d·ª•c, ki·ªÉm tra s·ª©c kh·ªèe mi·ªÖn ph√≠, t∆∞ v·∫•n dinh d∆∞·ª°ng. M·ªùi ph·ª• huynh v√† h·ªçc sinh tham gia.",
      type: "event",
      priority: "medium",
      date: "2024-03-10",
      time: "09:00",
      isRead: true,
      sender: "Ban t·ªï ch·ª©c",
    },
    {
      id: 4,
      title: "C·∫£nh b√°o d·ªãch tay ch√¢n mi·ªáng",
      content:
        "Hi·ªán t·∫°i trong khu v·ª±c ƒëang c√≥ d·ªãch tay ch√¢n mi·ªáng. Ph·ª• huynh l∆∞u √Ω quan s√°t con em, n·∫øu c√≥ bi·ªÉu hi·ªán s·ªët, ban ƒë·ªè ·ªü tay ch√¢n mi·ªáng th√¨ cho ngh·ªâ h·ªçc v√† ƒë∆∞a ƒë·∫øn c∆° s·ªü y t·∫ø kh√°m.",
      type: "health",
      priority: "high",
      date: "2024-03-08",
      time: "07:45",
      isRead: false,
      sender: "Y t·∫ø tr∆∞·ªùng",
    },
    {
      id: 5,
      title: "Th√¥ng b√°o ngh·ªâ h·ªçc do th·ªùi ti·∫øt",
      content:
        "Do ·∫£nh h∆∞·ªüng c·ªßa b√£o s·ªë 3, tr∆∞·ªùng th√¥ng b√°o h·ªçc sinh ngh·ªâ h·ªçc ng√†y 5/03/2024. Ph·ª• huynh l∆∞u √Ω gi·ªØ an to√†n cho con em trong th·ªùi gian ngh·ªâ h·ªçc.",
      type: "general",
      priority: "high",
      date: "2024-03-04",
      time: "20:30",
      isRead: true,
      sender: "Ban gi√°m hi·ªáu",
    },
  ];

  const filterTypes = [
    { id: "all", name: "T·∫•t c·∫£", icon: "üìã", color: "#56D0DB" },
    { id: "vaccination", name: "Ti√™m ch·ªßng", icon: "üíâ", color: "#2D77C1" },
    { id: "health", name: "S·ª©c kh·ªèe", icon: "üè•", color: "#28a745" },
    { id: "event", name: "S·ª± ki·ªán", icon: "üéâ", color: "#ffc107" },
    { id: "general", name: "Th√¥ng b√°o chung", icon: "üì¢", color: "#6f42c1" },
  ];

  const filteredNotifications = notifications.filter((notification) => {
    const matchesFilter =
      selectedFilter === "all" || notification.type === selectedFilter;
    const matchesReadStatus = !showUnreadOnly || !notification.isRead;
    return matchesFilter && matchesReadStatus;
  });

  const getPriorityColor = (priority) => {
    const colors = {
      high: "#dc3545",
      medium: "#ffc107",
      low: "#28a745",
    };
    return colors[priority] || "#6c757d";
  };

  const getPriorityText = (priority) => {
    const texts = {
      high: "∆Øu ti√™n cao",
      medium: "∆Øu ti√™n trung b√¨nh",
      low: "∆Øu ti√™n th·∫•p",
    };
    return texts[priority] || priority;
  };

  const getTypeColor = (type) => {
    const colors = {
      vaccination: "#e3f2fd",
      health: "#e8f5e8",
      event: "#fff3e0",
      general: "#f3e5f5",
    };
    return colors[type] || "#f5f5f5";
  };

  const markAsRead = (id) => {
    // Logic ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
    console.log("Marking notification as read:", id);
  };

  const markAllAsRead = () => {
    // Logic ƒë·ªÉ ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
    console.log("Marking all notifications as read");
  };

  const unreadCount = notifications.filter((n) => !n.isRead).length;

  return (
    <div className="notifications-container">
      {/* Header */}
      <div className="page-header">
        <div className="header-content">
          <h1>üîî Th√¥ng B√°o</h1>
          <p>Theo d√µi c√°c th√¥ng b√°o quan tr·ªçng t·ª´ nh√† tr∆∞·ªùng</p>
        </div>
        <div className="header-actions">
          <span className="unread-count">{unreadCount} th√¥ng b√°o ch∆∞a ƒë·ªçc</span>
          <button className="mark-all-read-btn" onClick={markAllAsRead}>
            ‚úÖ ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
          </button>
        </div>
      </div>

      {/* Filters */}
      <div className="filters-section">
        <div className="filter-buttons">
          {filterTypes.map((filter) => (
            <button
              key={filter.id}
              className={`filter-btn ${
                selectedFilter === filter.id ? "active" : ""
              }`}
              onClick={() => setSelectedFilter(filter.id)}
              style={{
                borderColor: filter.color,
                backgroundColor:
                  selectedFilter === filter.id ? filter.color : "transparent",
                color: selectedFilter === filter.id ? "white" : filter.color,
              }}
            >
              <span className="filter-icon">{filter.icon}</span>
              <span>{filter.name}</span>
            </button>
          ))}
        </div>

        <div className="filter-options">
          <label className="unread-filter">
            <input
              type="checkbox"
              checked={showUnreadOnly}
              onChange={(e) => setShowUnreadOnly(e.target.checked)}
            />
            Ch·ªâ hi·ªán th√¥ng b√°o ch∆∞a ƒë·ªçc
          </label>
        </div>
      </div>

      {/* Notifications List */}
      <div className="notifications-list">
        {filteredNotifications.map((notification) => (
          <div
            key={notification.id}
            className={`notification-card ${
              !notification.isRead ? "unread" : ""
            }`}
            style={{ backgroundColor: getTypeColor(notification.type) }}
          >
            <div className="notification-header">
              <div className="notification-meta">
                <span className="notification-sender">
                  üë§ {notification.sender}
                </span>
                <span className="notification-datetime">
                  üìÖ {notification.date} ‚Ä¢ ‚è∞ {notification.time}
                </span>
                <span
                  className="notification-priority"
                  style={{
                    backgroundColor: getPriorityColor(notification.priority),
                    color: "white",
                  }}
                >
                  {getPriorityText(notification.priority)}
                </span>
              </div>
              {!notification.isRead && (
                <div className="unread-indicator">‚óè</div>
              )}
            </div>

            <div className="notification-body">
              <h3 className="notification-title">{notification.title}</h3>
              <p className="notification-content">{notification.content}</p>
            </div>

            <div className="notification-actions">
              {!notification.isRead && (
                <button
                  className="mark-read-btn"
                  onClick={() => markAsRead(notification.id)}
                >
                  ‚úÖ ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
                </button>
              )}
              <button className="reply-btn">üí¨ Ph·∫£n h·ªìi</button>
              <button className="save-btn">üíæ L∆∞u</button>
            </div>
          </div>
        ))}
      </div>

      {filteredNotifications.length === 0 && (
        <div className="no-notifications">
          <div className="no-notifications-icon">üì≠</div>
          <p>Kh√¥ng c√≥ th√¥ng b√°o n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn</p>
        </div>
      )}

      {/* Quick Stats */}
      <div className="notification-stats">
        <div className="stat-item">
          <span className="stat-number">{notifications.length}</span>
          <span className="stat-label">T·ªïng th√¥ng b√°o</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{unreadCount}</span>
          <span className="stat-label">Ch∆∞a ƒë·ªçc</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">
            {notifications.filter((n) => n.priority === "high").length}
          </span>
          <span className="stat-label">∆Øu ti√™n cao</span>
        </div>
      </div>
    </div>
  );
}

export default Notifications;
