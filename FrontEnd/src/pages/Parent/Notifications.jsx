import React, { useState, useEffect } from "react";
import { useParentNotifications } from "../../utils/hooks/useParent";
import "../../css/Parent/Notifications.css";

const ParentNotifications = () => {
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);

  const {
    data: notifications,
    loading,
    error,
    refetch,
    fetchNotifications,
  } = useParentNotifications();

  // G·ªçi API khi component mount
  useEffect(() => {
    fetchNotifications();
  }, [fetchNotifications]);

  // H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ API ƒë·ªÉ hi·ªÉn th·ªã
  const processNotificationData = (apiData) => {
    if (!apiData) {
      return [];
    }
    
    if (!Array.isArray(apiData)) {
      return [];
    }
    
    if (apiData.length === 0) {
      return [];
    }
    
    const processed = apiData.map(notification => {
      if (!notification.notificationId) {
        return null;
      }
      
      // L·∫•y th√¥ng tin chi ti·∫øt cho parent hi·ªán t·∫°i (gi·∫£ s·ª≠ parentId = 1 cho Parent)
      const currentParentDetail = notification.notificationParentDetails?.find(
        detail => detail.parentId === 1
      ) || notification.notificationParentDetails?.[0];

      return {
        id: notification.notificationId,
        title: notification.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
        message: currentParentDetail?.message || "Kh√¥ng c√≥ n·ªôi dung",
        type: notification.type || "Chung",
        targetType: "parent",
        createdAt: notification.createdAt || new Date().toISOString(),
        createdBy: notification.createdby || "H·ªá th·ªëng",
        notificationParentDetails: notification.notificationParentDetails || [],
      };
    }).filter(Boolean);
    
    return processed;
  };

  const processedNotifications = processNotificationData(notifications);

  // Th·ªëng k√™
  const stats = {
    total: processedNotifications.length,
    urgent: processedNotifications.filter(n => n.type === "Kh·∫©n c·∫•p").length,
  };

  const getTypeBadge = (type) => {
    const typeMap = {
      "S·ª©c kh·ªèe": { label: "S·ª©c kh·ªèe", class: "type-s·ª©c-kh·ªèe" },
      "Kh·∫©n c·∫•p": { label: "Kh·∫©n c·∫•p", class: "type-kh·∫©n-c·∫•p" },
      "Nh·∫Øc nh·ªü": { label: "Nh·∫Øc nh·ªü", class: "type-nh·∫Øc-nh·ªü" },
      "S·ª± ki·ªán": { label: "S·ª± ki·ªán", class: "type-s·ª±-ki·ªán" },
      "Chung": { label: "Chung", class: "type-chung" },
      "general": { label: "Chung", class: "type-general" },
      "health": { label: "S·ª©c kh·ªèe", class: "type-health" },
      "emergency": { label: "Kh·∫©n c·∫•p", class: "type-emergency" },
      "reminder": { label: "Nh·∫Øc nh·ªü", class: "type-reminder" },
      "event": { label: "S·ª± ki·ªán", class: "type-event" },
    };

    const typeInfo = typeMap[type] || typeMap["Chung"];
    return (
      <span className={`type-badge ${typeInfo.class}`}>{typeInfo.label}</span>
    );
  };

  const handleViewDetail = (notification) => {
    setSelectedNotification(notification);
    setShowDetailModal(true);
  };

  const handleCloseModal = () => {
    setShowDetailModal(false);
    setSelectedNotification(null);
  };

  if (loading) {
    return (
      <div className="notifications-container">
        <div className="loading-container">
          <div className="spinner"></div>
          <p>‚è≥ ƒêang t·∫£i th√¥ng b√°o...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="notifications-container">
        <div className="error-container">
          <p>‚ùå {error}</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="notifications-container">
      <div className="page-header">
        <div className="header-content">
          <h1>üì¢ Th√¥ng B√°o</h1>
          <p>Xem th√¥ng b√°o t·ª´ nh√† tr∆∞·ªùng</p>
        </div>
        <button onClick={refetch} className="refresh-btn">
          üîÑ L√†m m·ªõi
        </button>
      </div>

      {/* Th·ªëng k√™ */}
      <div className="stats-section">
        <div className="stat-card">
          <div className="stat-icon">üì®</div>
          <div className="stat-content">
            <div className="stat-value">{stats.total}</div>
            <div className="stat-title">T·ªïng Th√¥ng B√°o</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">üö®</div>
          <div className="stat-content">
            <div className="stat-value">{stats.urgent}</div>
            <div className="stat-title">Kh·∫©n C·∫•p</div>
          </div>
        </div>
      </div>

      {/* Danh s√°ch th√¥ng b√°o */}
      <div className="notifications-section">
        <div className="section-header">
          <h2>Th√¥ng B√°o G·∫ßn ƒê√¢y</h2>
        </div>

        {processedNotifications.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üì≠</div>
            <h3>Ch∆∞a c√≥ th√¥ng b√°o n√†o</h3>
            <p>Ch∆∞a c√≥ th√¥ng b√°o n√†o ƒë∆∞·ª£c g·ª≠i</p>
          </div>
        ) : (
          <div className="notifications-table-container">
            <table className="notifications-table">
              <thead>
                <tr>
                  <th>Ti√™u ƒë·ªÅ</th>
                  <th>Lo·∫°i</th>
                  <th>N·ªôi dung</th>
                  <th>Ng√†y t·∫°o</th>
                  <th>Ng∆∞·ªùi t·∫°o</th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {processedNotifications.map((notification, index) => (
                  <tr
                    key={notification.id || index}
                    className="notification-row"
                  >
                    <td className="title-cell">
                      <div className="title-content">{notification.title}</div>
                    </td>
                    <td className="type-cell">
                      {getTypeBadge(notification.type)}
                    </td>
                    <td className="message-cell">
                      <div className="message-content">
                        {notification.message.length > 100 
                          ? `${notification.message.substring(0, 100)}...` 
                          : notification.message}
                      </div>
                    </td>
                    <td className="date-cell">
                      {new Date(notification.createdAt).toLocaleDateString(
                        "vi-VN"
                      )}
                    </td>
                    <td className="creator-cell">
                      {notification.createdBy || "H·ªá th·ªëng"}
                    </td>
                    <td className="action-cell">
                      <button
                        onClick={() => handleViewDetail(notification)}
                        className="view-detail-btn"
                        title="Xem chi ti·∫øt"
                      >
                        üëÅÔ∏è
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal xem chi ti·∫øt */}
      {showDetailModal && selectedNotification && (
        <div className="modal-overlay" onClick={handleCloseModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üìã Chi Ti·∫øt Th√¥ng B√°o</h3>
              <button onClick={handleCloseModal} className="close-btn">
                ‚úï
              </button>
            </div>
            <div className="modal-body">
              <div className="detail-section">
                <h4>Th√¥ng tin chung</h4>
                <div className="detail-row">
                  <strong>Ti√™u ƒë·ªÅ:</strong> {selectedNotification.title}
                </div>
                <div className="detail-row">
                  <strong>Lo·∫°i:</strong> {getTypeBadge(selectedNotification.type)}
                </div>
                <div className="detail-row">
                  <strong>Ng√†y t·∫°o:</strong>{" "}
                  {new Date(selectedNotification.createdAt).toLocaleString("vi-VN")}
                </div>
                <div className="detail-row">
                  <strong>Ng∆∞·ªùi t·∫°o:</strong> {selectedNotification.createdBy}
                </div>
              </div>
              
              <div className="detail-section">
                <h4>N·ªôi dung chi ti·∫øt</h4>
                <div className="message-detail">
                  {selectedNotification.message}
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button onClick={handleCloseModal} className="close-modal-btn">
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ParentNotifications;
