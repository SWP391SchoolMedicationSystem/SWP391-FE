import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { submitDonation, getDonationHistory } from '../../services/parentService';
import '../../css/Parent/DonateMedicine.css';
import apiClient from '../../services/config';

const GET_ALL_STUDENTS_API = 'https://api-schoolhealth.purintech.id.vn/api/Student/GetAllStudents';

const DonateMedicine = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    studentId: '',
    medicineName: '',
    medicineType: '',
    quantity: '',
    expiryDate: '',
    condition: 'good',
    description: '',
    contactPhone: '',
    preferredTime: ''
  });
  
  const [donationHistory, setDonationHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [message, setMessage] = useState({ type: '', text: '' });
  const [students, setStudents] = useState([]);

  useEffect(() => {
    fetchStudentsByParent();
    loadDonationHistory();
  }, []);

  const fetchStudentsByParent = async () => {
    try {
      const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');
      const parentId = userInfo.userId;
      const res = await apiClient.get(GET_ALL_STUDENTS_API);
      // L·ªçc h·ªçc sinh theo parentId
      const filtered = Array.isArray(res)
        ? res.filter(stu => String(stu.parentid) === String(parentId))
        : [];
      setStudents(filtered.map(stu => ({
        id: stu.studentid,
        name: stu.fullname,
        class: stu.classid || '---'
      })));
    } catch (err) {
      setStudents([]);
    }
  };

  const loadDonationHistory = async () => {
    setLoading(true);
    try {
      const history = await getDonationHistory();
      setDonationHistory(history);
    } catch (error) {
      console.error('Error loading donation history:', error);
      setMessage({ type: 'error', text: 'Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ g·ª≠i thu·ªëc' });
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    setMessage({ type: '', text: '' });

    try {
      await submitDonation(formData);
      setMessage({ type: 'success', text: 'G·ª≠i th√¥ng tin thu·ªëc cho h·ªçc sinh th√†nh c√¥ng!' });
      setFormData({
        studentId: '',
        medicineName: '',
        medicineType: '',
        quantity: '',
        expiryDate: '',
        condition: 'good',
        description: '',
        contactPhone: '',
        preferredTime: ''
      });
      loadDonationHistory();
    } catch (error) {
      console.error('Error submitting donation:', error);
      setMessage({ type: 'error', text: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.' });
    } finally {
      setSubmitting(false);
    }
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      'pending': { class: 'status-pending', text: 'Ch·ªù x·ª≠ l√Ω' },
      'approved': { class: 'status-approved', text: 'ƒê√£ ch·∫•p nh·∫≠n' },
      'rejected': { class: 'status-rejected', text: 'T·ª´ ch·ªëi' },
      'completed': { class: 'status-approved', text: 'Ho√†n th√†nh' }
    };
    
    const statusInfo = statusMap[status] || statusMap['pending'];
    return <span className={`status-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="donate-medicine-container">
      {/* Header */}
      <div className="donate-header">
        <div>
          <h1>G·ª≠i Thu·ªëc Cho H·ªçc Sinh</h1>
          <p>Ph·ª• huynh g·ª≠i thu·ªëc cho h·ªçc sinh mang ƒë·∫øn tr∆∞·ªùng, ƒë·∫£m b·∫£o an to√†n v√† ƒë√∫ng quy ƒë·ªãnh</p>
        </div>
      </div>

      {/* Information Section */}
      <div className="donate-info-section">
        <div className="info-header">
          <h3>‚ÑπÔ∏è Th√¥ng Tin G·ª≠i Thu·ªëc Cho H·ªçc Sinh</h3>
        </div>
        <div className="info-content">
          <div className="info-item">
            <h4>üìã Quy tr√¨nh g·ª≠i thu·ªëc</h4>
            <p>Khi b·∫°n g·ª≠i th√¥ng tin thu·ªëc cho h·ªçc sinh, nh√† tr∆∞·ªùng s·∫Ω:</p>
            <ul>
              <li>Ti·∫øp nh·∫≠n th√¥ng tin thu·ªëc v√† li√™n h·ªá x√°c nh·∫≠n n·∫øu c·∫ßn</li>
              <li>H∆∞·ªõng d·∫´n ph·ª• huynh ghi nh√£n thu·ªëc r√µ r√†ng (t√™n h·ªçc sinh, l·ªõp, li·ªÅu d√πng...)</li>
              <li>Nh·∫≠n thu·ªëc t·ª´ ph·ª• huynh v√† b√†n giao cho y t·∫ø tr∆∞·ªùng</li>
              <li>ƒê·∫£m b·∫£o thu·ªëc ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë√∫ng cho h·ªçc sinh</li>
            </ul>
          </div>

          <div className="info-item">
            <h4>‚úÖ L∆∞u √Ω khi g·ª≠i thu·ªëc cho h·ªçc sinh</h4>
            <ul>
              <li>Thu·ªëc c√≤n h·∫°n s·ª≠ d·ª•ng, bao b√¨ nguy√™n v·∫πn</li>
              <li>Ghi r√µ h·ªç t√™n h·ªçc sinh, l·ªõp, li·ªÅu d√πng, th·ªùi gian d√πng tr√™n nh√£n thu·ªëc</li>
              <li>Kh√¥ng g·ª≠i thu·ªëc k√™ ƒë∆°n ƒë·∫∑c bi·ªát (thu·ªëc g√¢y nghi·ªán, ki·ªÉm so√°t...)</li>
              <li>Th√¥ng b√°o cho gi√°o vi√™n ch·ªß nhi·ªám/y t·∫ø tr∆∞·ªùng khi g·ª≠i thu·ªëc</li>
            </ul>
          </div>

          <div className="info-item">
            <h4>üìû Li√™n h·ªá h·ªó tr·ª£</h4>
            <p>N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc v·ªÅ vi·ªác g·ª≠i thu·ªëc cho h·ªçc sinh, vui l√≤ng li√™n h·ªá:</p>
            <ul>
              <li>Hotline: 1900-xxxx</li>
              <li>Email: schoolhealth@medlearn.com</li>
              <li>Gi·ªù l√†m vi·ªác: 8:00 - 18:00 (Th·ª© 2 - Th·ª© 6)</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="donate-content">
        {/* Send Medicine Form */}
        <div className="donate-form-section">
          <div className="form-header">
            <h3>üìã Form G·ª≠i Thu·ªëc Cho H·ªçc Sinh</h3>
          </div>
          <div className="form-content">
            {message.text && (
              <div className={`${message.type}-message`}>
                {message.text}
              </div>
            )}
            
            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label htmlFor="studentId">Ch·ªçn h·ªçc sinh *</label>
                <select
                  id="studentId"
                  name="studentId"
                  value={formData.studentId}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Ch·ªçn h·ªçc sinh</option>
                  {students.map((student) => (
                    <option key={student.id} value={student.id}>
                      {student.name} - L·ªõp {student.class}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="medicineName">T√™n thu·ªëc *</label>
                <input
                  type="text"
                  id="medicineName"
                  name="medicineName"
                  value={formData.medicineName}
                  onChange={handleInputChange}
                  required
                  placeholder="V√≠ d·ª•: Paracetamol, Amoxicillin..."
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="medicineType">Lo·∫°i thu·ªëc *</label>
                  <select
                    id="medicineType"
                    name="medicineType"
                    value={formData.medicineType}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Ch·ªçn lo·∫°i thu·ªëc</option>
                    <option value="painkiller">Thu·ªëc gi·∫£m ƒëau</option>
                    <option value="antibiotic">Thu·ªëc kh√°ng sinh</option>
                    <option value="vitamin">Vitamin</option>
                    <option value="cold">Thu·ªëc c·∫£m c√∫m</option>
                    <option value="fever">Thu·ªëc h·∫° s·ªët</option>
                    <option value="other">Kh√°c</option>
                  </select>
                </div>

                <div className="form-group">
                  <label htmlFor="quantity">S·ªë l∆∞·ª£ng *</label>
                  <input
                    type="number"
                    id="quantity"
                    name="quantity"
                    value={formData.quantity}
                    onChange={handleInputChange}
                    required
                    min="1"
                    placeholder="S·ªë vi√™n/h·ªôp"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="expiryDate">H·∫°n s·ª≠ d·ª•ng *</label>
                  <input
                    type="date"
                    id="expiryDate"
                    name="expiryDate"
                    value={formData.expiryDate}
                    onChange={handleInputChange}
                    required
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="condition">T√¨nh tr·∫°ng thu·ªëc *</label>
                  <select
                    id="condition"
                    name="condition"
                    value={formData.condition}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="good">C√≤n t·ªët</option>
                    <option value="excellent">R·∫•t t·ªët</option>
                    <option value="fair">T·∫°m ƒë∆∞·ª£c</option>
                  </select>
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="description">M√¥ t·∫£ chi ti·∫øt (li·ªÅu d√πng, th·ªùi gian d√πng...)</label>
                <textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  placeholder="M√¥ t·∫£ v·ªÅ thu·ªëc, li·ªÅu d√πng, th·ªùi gian d√πng, l∆∞u √Ω cho y t·∫ø tr∆∞·ªùng..."
                />
              </div>

              <div className="form-group">
                <label htmlFor="contactPhone">S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá *</label>
                <input
                  type="tel"
                  id="contactPhone"
                  name="contactPhone"
                  value={formData.contactPhone}
                  onChange={handleInputChange}
                  required
                  placeholder="0123456789"
                />
              </div>

              <div className="form-group">
                <label htmlFor="preferredTime">Th·ªùi gian thu·∫≠n ti·ªán li√™n h·ªá</label>
                <input
                  type="text"
                  id="preferredTime"
                  name="preferredTime"
                  value={formData.preferredTime}
                  onChange={handleInputChange}
                  placeholder="V√≠ d·ª•: S√°ng 8-12h, Chi·ªÅu 14-18h"
                />
              </div>

              <button 
                type="submit" 
                className="submit-btn"
                disabled={submitting}
              >
                {submitting ? 'ƒêang g·ª≠i...' : 'G·ª≠i th√¥ng tin thu·ªëc cho h·ªçc sinh'}
              </button>
            </form>
          </div>
        </div>

        {/* Send Medicine History */}
        <div className="donate-history-section">
          <div className="history-header">
            <h3>üìä L·ªãch S·ª≠ G·ª≠i Thu·ªëc</h3>
          </div>
          <div className="history-content">
            {loading ? (
              <div className="empty-history">
                <h4>ƒêang t·∫£i...</h4>
              </div>
            ) : donationHistory.length === 0 ? (
              <div className="empty-history">
                <h4>Ch∆∞a c√≥ l·ªãch s·ª≠ g·ª≠i thu·ªëc</h4>
                <p>B·∫°n ch∆∞a g·ª≠i thu·ªëc n√†o cho h·ªçc sinh. H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch ƒëi·ªÅn form b√™n c·∫°nh!</p>
              </div>
            ) : (
              donationHistory.map((donation, index) => (
                <div key={index} className="history-item">
                  <h4>{donation.medicineName}</h4>
                  <div className="history-details">
                    <div className="history-detail">
                      <label>Lo·∫°i thu·ªëc:</label>
                      <span>{donation.medicineType}</span>
                    </div>
                    <div className="history-detail">
                      <label>S·ªë l∆∞·ª£ng:</label>
                      <span>{donation.quantity}</span>
                    </div>
                    <div className="history-detail">
                      <label>H·∫°n s·ª≠ d·ª•ng:</label>
                      <span>{new Date(donation.expiryDate).toLocaleDateString('vi-VN')}</span>
                    </div>
                    <div className="history-detail">
                      <label>T√¨nh tr·∫°ng:</label>
                      <span>{donation.condition}</span>
                    </div>
                    {donation.studentId && (
                      <div className="history-detail">
                        <label>H·ªçc sinh:</label>
                        <span>{students.find(s => String(s.id) === String(donation.studentId))?.name || '---'}</span>
                      </div>
                    )}
                  </div>
                  {donation.description && (
                    <div className="history-detail">
                      <label>M√¥ t·∫£:</label>
                      <span>{donation.description}</span>
                    </div>
                  )}
                  <div className="history-status">
                    {getStatusBadge(donation.status)}
                    <span className="history-date">{formatDate(donation.createdAt)}</span>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      {/* Loading Overlay */}
      {submitting && (
        <div className="loading-overlay">
          <div className="loading-spinner">
            <h4>ƒêang g·ª≠i th√¥ng tin...</h4>
            <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default DonateMedicine; 