import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "../../css/Nurse/StudentList.css";
import { useNurseStudents } from "../../utils/hooks/useNurse";

function StudentList() {
  const navigate = useNavigate();

  // Use API hooks
  const { data: students, loading, error, refetch } = useNurseStudents();

  const [searchTerm, setSearchTerm] = useState("");
  const [filterClass, setFilterClass] = useState("");
  const [filterGender, setFilterGender] = useState("");
  const [filterHealthStatus, setFilterHealthStatus] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState(null);

  // Available options
  const classes = ["M·∫ßm", "Ch·ªìi", "L√° 1", "L√° 2", "L√° 3"];
  const genders = ["Nam", "N·ªØ"];
  const healthStatuses = ["T·ªët", "B√¨nh th∆∞·ªùng", "Y·∫øu"];

  // Use real students from API
  const studentData = students || [];

  // Debug API response
  console.log("üë• API students response:", students);
  console.log("üìä Using studentData:", studentData);
  console.log("üìà Total students available:", studentData.length);

  if (studentData.length === 0 && !loading) {
    console.log("‚ö†Ô∏è No students data available - check API connection");
  }

  // Filter students with safety checks
  const filteredStudents = studentData.filter((student) => {
    const matchesSearch =
      (student.fullName &&
        student.fullName.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (student.studentId &&
        student.studentId.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (student.parentName &&
        student.parentName.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesClass =
      filterClass === "" || student.className === filterClass;
    const matchesGender =
      filterGender === "" || student.gender === filterGender;
    const matchesHealthStatus =
      filterHealthStatus === "" || student.healthStatus === filterHealthStatus;

    return (
      matchesSearch && matchesClass && matchesGender && matchesHealthStatus
    );
  });

  const handleViewStudent = (student) => {
    setSelectedStudent(student);
    setShowModal(true);
  };

  const handleViewHealthRecords = (student) => {
    console.log("üè• NAVIGATING TO HEALTH RECORDS PAGE");
    console.log("üìã Student Object:", student);
    console.log("üÜî Student ID:", student.id);

    // Navigate to student health record detail page
    navigate(`/nurse/student-health-record/${student.id}`);
  };

  const getSeverityColor = (severity) => {
    const colors = {
      Nh·∫π: "#28a745",
      "Trung b√¨nh": "#ffc107",
      N·∫∑ng: "#dc3545",
      "B√¨nh th∆∞·ªùng": "#17a2b8",
    };
    return colors[severity] || "#6c757d";
  };

  const getHealthStatusClass = (status) => {
    switch (status) {
      case "T·ªët":
        return "health-good";
      case "B√¨nh th∆∞·ªùng":
        return "health-normal";
      case "Y·∫øu":
        return "health-weak";
      default:
        return "health-normal";
    }
  };

  const getClassBadgeColor = (className) => {
    const colors = {
      M·∫ßm: "badge-mam",
      Ch·ªìi: "badge-choi",
      "L√° 1": "badge-la1",
      "L√° 2": "badge-la2",
      "L√° 3": "badge-la3",
    };
    return colors[className] || "badge-default";
  };

  // Statistics
  const stats = {
    total: studentData.length,
    male: studentData.filter((s) => s.gender === "Nam").length,
    female: studentData.filter((s) => s.gender === "N·ªØ").length,
    healthy: studentData.filter((s) => s.healthStatus === "T·ªët").length,
  };

  // Show loading state
  if (loading) {
    return (
      <div className="student-list-container">
        <div className="loading-state">
          <p>‚è≥ ƒêang t·∫£i danh s√°ch h·ªçc sinh...</p>
        </div>
      </div>
    );
  }

  // Show error state
  if (error) {
    return (
      <div className="student-list-container">
        <div className="error-state">
          <p>‚ùå L·ªói khi t·∫£i danh s√°ch h·ªçc sinh: {error}</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="student-list-container">
      <div className="page-header">
        <div className="header-content">
          <h1>üë• Danh S√°ch H·ªçc Sinh</h1>
          <p>Xem th√¥ng tin h·ªçc sinh trong tr∆∞·ªùng</p>
        </div>
        <button onClick={refetch} className="refresh-btn">
          üîÑ T·∫£i l·∫°i
        </button>
      </div>

      {/* Statistics Cards */}
      <div className="stats-container">
        <div className="stat-card total">
          <div className="stat-icon">üë•</div>
          <div className="stat-content">
            <h3>{stats.total}</h3>
            <p>T·ªïng h·ªçc sinh</p>
          </div>
        </div>
        <div className="stat-card male">
          <div className="stat-icon">üë¶</div>
          <div className="stat-content">
            <h3>{stats.male}</h3>
            <p>Nam</p>
          </div>
        </div>
        <div className="stat-card female">
          <div className="stat-icon">üëß</div>
          <div className="stat-content">
            <h3>{stats.female}</h3>
            <p>N·ªØ</p>
          </div>
        </div>
        <div className="stat-card healthy">
          <div className="stat-icon">‚ù§Ô∏è</div>
          <div className="stat-content">
            <h3>{stats.healthy}</h3>
            <p>S·ª©c kh·ªèe t·ªët</p>
          </div>
        </div>
      </div>

      {/* Search and Filter Controls */}
      <div className="controls-section">
        <div className="search-box">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="T√¨m ki·∫øm theo t√™n, m√£ h·ªçc sinh, ho·∫∑c ph·ª• huynh..."
          />
        </div>

        <div className="filter-box">
          <select
            value={filterClass}
            onChange={(e) => setFilterClass(e.target.value)}
          >
            <option value="">T·∫•t c·∫£ l·ªõp</option>
            {classes.map((className) => (
              <option key={className} value={className}>
                {className}
              </option>
            ))}
          </select>

          <select
            value={filterGender}
            onChange={(e) => setFilterGender(e.target.value)}
          >
            <option value="">T·∫•t c·∫£ gi·ªõi t√≠nh</option>
            {genders.map((gender) => (
              <option key={gender} value={gender}>
                {gender}
              </option>
            ))}
          </select>

          <select
            value={filterHealthStatus}
            onChange={(e) => setFilterHealthStatus(e.target.value)}
          >
            <option value="">T·∫•t c·∫£ s·ª©c kh·ªèe</option>
            {healthStatuses.map((status) => (
              <option key={status} value={status}>
                {status}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Students Table */}
      <div className="table-container">
        <table className="students-table">
          <thead>
            <tr>
              <th>M√£ HS</th>
              <th>H·ªç t√™n</th>
              <th>L·ªõp</th>
              <th>Ph·ª• huynh</th>
              <th>Ng√†y sinh</th>
              <th>Gi·ªõi t√≠nh</th>
              <th>S·ª©c kh·ªèe</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredStudents.map((student) => (
              <tr key={student.id}>
                <td className="student-id">{student.studentId}</td>
                <td>
                  <div className="student-name-info">
                    <strong>{student.fullName}</strong>
                    <small>{student.bloodType}</small>
                  </div>
                </td>
                <td>
                  <span
                    className={`class-badge ${getClassBadgeColor(
                      student.className
                    )}`}
                  >
                    {student.className}
                  </span>
                </td>
                <td>
                  <div className="parent-info">
                    <div>{student.parentName}</div>
                    <small>{student.parentPhone}</small>
                  </div>
                </td>
                <td>{student.dateOfBirth}</td>
                <td>
                  <span
                    className={`gender-badge ${student.gender.toLowerCase()}`}
                  >
                    {student.gender}
                  </span>
                </td>
                <td>
                  <span
                    className={`health-badge ${getHealthStatusClass(
                      student.healthStatus
                    )}`}
                  >
                    {student.healthStatus}
                  </span>
                </td>
                <td>
                  <div className="action-buttons">
                    <button
                      className="btn-view"
                      onClick={() => handleViewStudent(student)}
                      title="Xem chi ti·∫øt"
                    >
                      üëÅÔ∏è
                    </button>
                    <button
                      className="btn-health"
                      onClick={() => handleViewHealthRecords(student)}
                      title="H·ªì s∆° s·ª©c kh·ªèe"
                    >
                      üè•
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {filteredStudents.length === 0 && (
          <div className="no-data">
            <p>Kh√¥ng t√¨m th·∫•y h·ªçc sinh n√†o</p>
          </div>
        )}
      </div>

      {/* Student Detail Modal */}
      {showModal && selectedStudent && (
        <div className="modal-overlay" onClick={() => setShowModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Th√¥ng tin chi ti·∫øt - {selectedStudent.fullName}</h3>
              <button
                className="modal-close"
                onClick={() => setShowModal(false)}
              >
                √ó
              </button>
            </div>

            <div className="modal-body">
              <div className="detail-grid">
                <div className="detail-item">
                  <label>M√£ h·ªçc sinh:</label>
                  <span>{selectedStudent.studentId}</span>
                </div>
                <div className="detail-item">
                  <label>H·ªç t√™n:</label>
                  <span>{selectedStudent.fullName}</span>
                </div>
                <div className="detail-item">
                  <label>Ng√†y sinh:</label>
                  <span>{selectedStudent.dateOfBirth}</span>
                </div>
                <div className="detail-item">
                  <label>Gi·ªõi t√≠nh:</label>
                  <span>{selectedStudent.gender}</span>
                </div>
                <div className="detail-item">
                  <label>L·ªõp:</label>
                  <span>{selectedStudent.className}</span>
                </div>
                <div className="detail-item">
                  <label>Nh√≥m m√°u:</label>
                  <span>{selectedStudent.bloodType}</span>
                </div>
                <div className="detail-item">
                  <label>Chi·ªÅu cao:</label>
                  <span>{selectedStudent.height}</span>
                </div>
                <div className="detail-item">
                  <label>C√¢n n·∫∑ng:</label>
                  <span>{selectedStudent.weight}</span>
                </div>
                <div className="detail-item">
                  <label>T√¨nh tr·∫°ng s·ª©c kh·ªèe:</label>
                  <span
                    className={`health-badge ${getHealthStatusClass(
                      selectedStudent.healthStatus
                    )}`}
                  >
                    {selectedStudent.healthStatus}
                  </span>
                </div>
                <div className="detail-item">
                  <label>D·ªã ·ª©ng:</label>
                  <span
                    className={
                      selectedStudent.allergies !== "Kh√¥ng"
                        ? "allergy-warning"
                        : ""
                    }
                  >
                    {selectedStudent.allergies}
                  </span>
                </div>
                <div className="detail-item">
                  <label>Ph·ª• huynh:</label>
                  <span>{selectedStudent.parentName}</span>
                </div>
                <div className="detail-item">
                  <label>SƒêT ph·ª• huynh:</label>
                  <span>{selectedStudent.parentPhone}</span>
                </div>
                <div className="detail-item">
                  <label>Li√™n h·ªá kh·∫©n c·∫•p:</label>
                  <span>{selectedStudent.emergencyContact}</span>
                </div>
                <div className="detail-item">
                  <label>Ng√†y nh·∫≠p h·ªçc:</label>
                  <span>{selectedStudent.enrollmentDate}</span>
                </div>
                <div className="detail-item full-width">
                  <label>Ghi ch√∫:</label>
                  <span>{selectedStudent.notes}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default StudentList;
