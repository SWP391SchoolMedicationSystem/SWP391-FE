import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../../css/Nurse/StudentList.css';
import { useNurseStudents } from '../../utils/hooks/useNurse';

function StudentList() {
  const navigate = useNavigate();
  const { data: students, loading, error, refetch } = useNurseStudents();

  // Mock data for fallback
  const [mockStudents] = useState([
    {
      id: 1,
      studentId: 'MN001',
      fullName: 'Nguy·ªÖn VƒÉn An',
      dateOfBirth: '2020-05-15',
      gender: 'Nam',
      className: 'M·∫ßm',
      parentName: 'Nguy·ªÖn Th·ªã Hoa',
      parentPhone: '0912345678',
      healthStatus: 'T·ªët',
      allergies: 'Kh√¥ng',
      emergencyContact: 'Nguy·ªÖn VƒÉn Nam - 0987654321',
      enrollmentDate: '2024-01-15',
      bloodType: 'A+',
      height: '95cm',
      weight: '14kg',
      notes: 'Tr·∫ª ho·∫°t b√°t, th√≠ch v·∫≠n ƒë·ªông',
      age: 4,
    },
    {
      id: 2,
      studentId: 'MN002',
      fullName: 'Tr·∫ßn Th·ªã B√¨nh',
      dateOfBirth: '2020-08-22',
      gender: 'N·ªØ',
      className: 'Ch·ªìi',
      parentName: 'Tr·∫ßn VƒÉn Nam',
      parentPhone: '0923456789',
      healthStatus: 'B√¨nh th∆∞·ªùng',
      allergies: 'D·ªã ·ª©ng t√¥m cua',
      emergencyContact: 'Tr·∫ßn Th·ªã Lan - 0976543210',
      enrollmentDate: '2024-01-20',
      bloodType: 'B+',
      height: '92cm',
      weight: '13kg',
      notes: 'Tr·∫ª nh√∫t nh√°t, c·∫ßn khuy·∫øn kh√≠ch',
      age: 4,
    },
    {
      id: 3,
      studentId: 'MN003',
      fullName: 'L√™ Minh C∆∞·ªùng',
      dateOfBirth: '2019-12-10',
      gender: 'Nam',
      className: 'L√° 1',
      parentName: 'L√™ Th·ªã Mai',
      parentPhone: '0934567890',
      healthStatus: 'T·ªët',
      allergies: 'Kh√¥ng',
      emergencyContact: 'L√™ VƒÉn C∆∞·ªùng - 0965432109',
      enrollmentDate: '2024-01-10',
      bloodType: 'O+',
      height: '98cm',
      weight: '15kg',
      notes: 'Tr·∫ª th√¥ng minh, ham h·ªçc h·ªèi',
      age: 5,
    },
    {
      id: 4,
      studentId: 'MN004',
      fullName: 'Ph·∫°m Th·ªã Di·ªáu',
      dateOfBirth: '2019-03-08',
      gender: 'N·ªØ',
      className: 'L√° 2',
      parentName: 'Ph·∫°m VƒÉn H√πng',
      parentPhone: '0945678901',
      healthStatus: 'Y·∫øu',
      allergies: 'D·ªã ·ª©ng ph·∫•n hoa',
      emergencyContact: 'Ph·∫°m Th·ªã H∆∞∆°ng - 0954321098',
      enrollmentDate: '2024-02-01',
      bloodType: 'AB+',
      height: '100cm',
      weight: '16kg',
      notes: 'Tr·∫ª hay ·ªëm, c·∫ßn ch√∫ √Ω s·ª©c kh·ªèe',
      age: 5,
    },
    {
      id: 5,
      studentId: 'MN005',
      fullName: 'Ho√†ng VƒÉn Em',
      dateOfBirth: '2019-07-30',
      gender: 'Nam',
      className: 'L√° 3',
      parentName: 'Ho√†ng Th·ªã Lan',
      parentPhone: '0956789012',
      healthStatus: 'B√¨nh th∆∞·ªùng',
      allergies: 'D·ªã ·ª©ng ƒë·∫≠u ph·ªông',
      emergencyContact: 'Ho√†ng VƒÉn T√∫ - 0943210987',
      enrollmentDate: '2024-01-25',
      bloodType: 'A-',
      height: '102cm',
      weight: '17kg',
      notes: 'Tr·∫ª nƒÉng ƒë·ªông, th√≠ch kh√°m ph√°',
      age: 5,
    },
    {
      id: 6,
      studentId: 'MN006',
      fullName: 'V√µ Th·ªã Ph∆∞·ª£ng',
      dateOfBirth: '2020-11-18',
      gender: 'N·ªØ',
      className: 'Ch·ªìi',
      parentName: 'V√µ VƒÉn Giang',
      parentPhone: '0967890123',
      healthStatus: 'T·ªët',
      allergies: 'Kh√¥ng',
      emergencyContact: 'V√µ Th·ªã Kim - 0932109876',
      enrollmentDate: '2024-02-10',
      bloodType: 'B-',
      height: '90cm',
      weight: '12kg',
      notes: 'Tr·∫ª ngoan ngo√£n, d·ªÖ b·∫£o',
      age: 4,
    },
  ]);

  const [searchTerm, setSearchTerm] = useState('');
  const [filterClass, setFilterClass] = useState('');
  const [filterHealthStatus, setFilterHealthStatus] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [currentStudent, setCurrentStudent] = useState(null);

  const classes = [
    { value: '', label: 'T·∫•t c·∫£ l·ªõp' },
    { value: 'M·∫ßm', label: 'M·∫ßm' },
    { value: 'Ch·ªìi', label: 'Ch·ªìi' },
    { value: 'L√° 1', label: 'L√° 1' },
    { value: 'L√° 2', label: 'L√° 2' },
    { value: 'L√° 3', label: 'L√° 3' },
  ];

  const healthStatuses = [
    { value: '', label: 'T·∫•t c·∫£ s·ª©c kh·ªèe' },
    { value: 'T·ªët', label: 'T·ªët' },
    { value: 'B√¨nh th∆∞·ªùng', label: 'B√¨nh th∆∞·ªùng' },
    { value: 'Y·∫øu', label: 'Y·∫øu' },
  ];

  const studentData = students || mockStudents;

  const filteredStudents = studentData.filter(student => {
    const matchesSearch =
      (student.fullName &&
        student.fullName.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (student.studentId &&
        student.studentId.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (student.parentName &&
        student.parentName.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesClass =
      filterClass === '' || student.className === filterClass;
    const matchesHealthStatus =
      filterHealthStatus === '' || student.healthStatus === filterHealthStatus;

    return matchesSearch && matchesClass && matchesHealthStatus;
  });

  const handleViewStudent = student => {
    setCurrentStudent(student);
    setShowModal(true);
  };

  const handleViewHealthRecords = student => {
    navigate(`/nurse/student-health-record/${student.id}`);
  };

  if (loading) {
    return (
      <div className="student-list-container">
        <div className="loading-state">
          <p>‚è≥ ƒêang t·∫£i danh s√°ch h·ªçc sinh...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="student-list-container">
        <div className="error-state">
          <p>‚ùå L·ªói khi t·∫£i danh s√°ch h·ªçc sinh: {error}</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="student-list-container">
      <div className="student-list-header">
        <div>
          <h1>Danh S√°ch H·ªçc Sinh</h1>
          <p>Qu·∫£n l√Ω th√¥ng tin s·ª©c kh·ªèe h·ªçc sinh tr∆∞·ªùng m·∫ßm non</p>
        </div>
      </div>

      {/* Controls */}
      <div className="controls-section">
        <div className="search-filter-controls">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n, m√£ h·ªçc sinh, t√™n ph·ª• huynh..."
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </div>

          <div className="filter-controls">
            <select
              value={filterClass}
              onChange={e => setFilterClass(e.target.value)}
            >
              {classes.map(classOption => (
                <option key={classOption.value} value={classOption.value}>
                  {classOption.label}
                </option>
              ))}
            </select>

            <select
              value={filterHealthStatus}
              onChange={e => setFilterHealthStatus(e.target.value)}
            >
              {healthStatuses.map(status => (
                <option key={status.value} value={status.value}>
                  {status.label}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Loading State */}
      {loading && (
        <div className="loading-state">
          <p>‚è≥ ƒêang t·∫£i danh s√°ch h·ªçc sinh...</p>
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="error-state">
          <p>‚ùå L·ªói khi t·∫£i danh s√°ch h·ªçc sinh: {error}</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      )}

      {/* Empty State */}
      {!loading && !error && (!studentData || studentData.length === 0) && (
        <div className="empty-state">
          <p>üì≠ Ch∆∞a c√≥ h·ªçc sinh n√†o trong h·ªá th·ªëng</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ T·∫£i l·∫°i
          </button>
        </div>
      )}

      {/* Student Table */}
      {!loading && !error && studentData && studentData.length > 0 && (
        <div className="table-container">
          <table className="student-table">
            <thead>
              <tr>
                <th>M√£ HS</th>
                <th>H·ªç t√™n</th>
                <th>L·ªõp</th>
                <th>Tu·ªïi</th>
                <th>Ng√†y sinh</th>
                <th>Gi·ªõi t√≠nh</th>
                <th>Nh√≥m m√°u</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {filteredStudents.map(student => (
                <tr key={student.id}>
                  <td className="student-id">{student.studentId}</td>
                  <td>
                    <div className="student-info">
                      <strong>{student.fullName}</strong>
                      <small>ID: {student.id}</small>
                    </div>
                  </td>
                  <td className="class-name">{student.className}</td>
                  <td>{student.age} tu·ªïi</td>
                  <td>{student.dateOfBirth}</td>
                  <td>{student.gender}</td>
                  <td>
                    <span className="blood-type">{student.bloodType}</span>
                  </td>
                  <td>
                    <div className="action-buttons">
                      <button
                        className="btn-view"
                        onClick={() => handleViewStudent(student)}
                        title="Xem chi ti·∫øt"
                      >
                        üëÅÔ∏è
                      </button>
                      <button
                        className="btn-health"
                        onClick={() => handleViewHealthRecords(student)}
                        title="Xem h·ªì s∆° s·ª©c kh·ªèe"
                      >
                        üè•
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {filteredStudents.length === 0 && (
            <div className="no-data">
              <p>Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc</p>
              <button
                onClick={() => {
                  setSearchTerm('');
                  setFilterClass('');
                  setFilterHealthStatus('');
                }}
                className="retry-btn"
              >
                üîÑ ƒê·∫∑t l·∫°i b·ªô l·ªçc
              </button>
            </div>
          )}
        </div>
      )}

      {/* Student Detail Modal */}
      {showModal && currentStudent && (
        <div className="modal-overlay" onClick={() => setShowModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Th√¥ng Tin Chi Ti·∫øt H·ªçc Sinh</h3>
              <button
                className="modal-close"
                onClick={() => setShowModal(false)}
              >
                √ó
              </button>
            </div>

            <div className="modal-body">
              <div className="student-details">
                <div className="detail-grid">
                  <div className="detail-item">
                    <label>M√£ h·ªçc sinh:</label>
                    <span>{currentStudent.studentId}</span>
                  </div>
                  <div className="detail-item">
                    <label>H·ªç v√† t√™n:</label>
                    <span>{currentStudent.fullName}</span>
                  </div>
                  <div className="detail-item">
                    <label>Ng√†y sinh:</label>
                    <span>{currentStudent.dateOfBirth}</span>
                  </div>
                  <div className="detail-item">
                    <label>Tu·ªïi:</label>
                    <span>{currentStudent.age} tu·ªïi</span>
                  </div>
                  <div className="detail-item">
                    <label>Gi·ªõi t√≠nh:</label>
                    <span>{currentStudent.gender}</span>
                  </div>
                  <div className="detail-item">
                    <label>L·ªõp:</label>
                    <span>{currentStudent.className}</span>
                  </div>
                  <div className="detail-item">
                    <label>Nh√≥m m√°u:</label>
                    <span>{currentStudent.bloodType}</span>
                  </div>
                  <div className="detail-item">
                    <label>Chi·ªÅu cao:</label>
                    <span>{currentStudent.height}</span>
                  </div>
                  <div className="detail-item">
                    <label>C√¢n n·∫∑ng:</label>
                    <span>{currentStudent.weight}</span>
                  </div>
                  <div className="detail-item">
                    <label>T√¨nh tr·∫°ng s·ª©c kh·ªèe:</label>
                    <span>{currentStudent.healthStatus}</span>
                  </div>
                  <div className="detail-item">
                    <label>D·ªã ·ª©ng:</label>
                    <span>{currentStudent.allergies}</span>
                  </div>
                  <div className="detail-item">
                    <label>Ph·ª• huynh:</label>
                    <span>{currentStudent.parentName}</span>
                  </div>
                  <div className="detail-item">
                    <label>SƒêT ph·ª• huynh:</label>
                    <span>{currentStudent.parentPhone}</span>
                  </div>
                  <div className="detail-item">
                    <label>Li√™n h·ªá kh·∫©n c·∫•p:</label>
                    <span>{currentStudent.emergencyContact}</span>
                  </div>
                  <div className="detail-item">
                    <label>Ng√†y nh·∫≠p h·ªçc:</label>
                    <span>{currentStudent.enrollmentDate}</span>
                  </div>
                  <div className="detail-item full-width">
                    <label>Ghi ch√∫:</label>
                    <span>{currentStudent.notes}</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="modal-footer">
              <button
                className="btn-health"
                onClick={() => {
                  setShowModal(false);
                  handleViewHealthRecords(currentStudent);
                }}
              >
                üè• Xem H·ªì S∆° S·ª©c Kh·ªèe
              </button>
              <button className="btn-close" onClick={() => setShowModal(false)}>
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default StudentList;
