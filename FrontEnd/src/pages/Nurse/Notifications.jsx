import React, { useState, useEffect } from 'react';
import { useNurseNotifications } from '../../utils/hooks/useNurse';
import '../../css/Nurse/Notifications.css';

const Notifications = () => {
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);

  const {
    data: notifications,
    loading,
    error,
    refetch,
    fetchNotifications,
  } = useNurseNotifications();

  // G·ªçi API khi component mount
  useEffect(() => {
    fetchNotifications();
  }, [fetchNotifications]);

  // Mock data for fallback - c·∫≠p nh·∫≠t theo c·∫•u tr√∫c API th·ª±c t·∫ø
  const [mockNotifications] = useState([
    {
      notificationId: 1,
      title: 'L·ªãch kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ nƒÉm h·ªçc 2025-2026',
      createdAt: '2025-07-09T12:12:02.687',
      type: 'S·ª©c kh·ªèe',
      isDeleted: false,
      createdby: 'Admin',
      notificationParentDetails: [],
      notificationstaffdetails: [
        {
          notificationId: 1,
          staffid: 3,
          message:
            'ƒê/c Y T√° chu·∫©n b·ªã c√¥ng t√°c t·ªï ch·ª©c kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho h·ªçc sinh theo k·∫ø ho·∫°ch.',
          isRead: true,
          isDeleted: false,
          createdDate: '2025-07-09T12:15:38.99',
          modifiedDate: '2025-07-09T12:15:38.99',
        },
        {
          notificationId: 1,
          staffid: 4,
          message:
            'ƒê/c Y Sƒ© ph·ªëi h·ª£p chu·∫©n b·ªã c√¥ng t√°c t·ªï ch·ª©c kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥.',
          isRead: true,
          isDeleted: false,
          createdDate: '2025-07-09T12:15:38.99',
          modifiedDate: '2025-07-09T12:15:38.99',
        },
        {
          notificationId: 1,
          staffid: 5,
          message:
            'Gi√°o vi√™n ch·ªß nhi·ªám th√¥ng b√°o l·ªãch kh√°m s·ª©c kh·ªèe cho h·ªçc sinh v√† ph·ª• huynh l·ªõp m√¨nh.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-09T12:15:38.99',
          modifiedDate: '2025-07-09T12:15:38.99',
        },
      ],
    },
    {
      notificationId: 2,
      title: 'Th√¥ng b√°o v·ªÅ d·ªãch b·ªánh c√∫m A/H1N1',
      createdAt: '2025-07-10T10:30:00.000',
      type: 'Kh·∫©n c·∫•p',
      isDeleted: false,
      createdby: 'Manager',
      notificationParentDetails: [],
      notificationstaffdetails: [
        {
          notificationId: 2,
          staffid: 3,
          message:
            'Y T√° c·∫ßn tƒÉng c∆∞·ªùng gi√°m s√°t s·ª©c kh·ªèe h·ªçc sinh, ph√°t hi·ªán s·ªõm c√°c tri·ªáu ch·ª©ng c√∫m.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-10T10:35:00.000',
          modifiedDate: '2025-07-10T10:35:00.000',
        },
        {
          notificationId: 2,
          staffid: 4,
          message:
            'Y Sƒ© chu·∫©n b·ªã thu·ªëc v√† thi·∫øt b·ªã y t·∫ø ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-10T10:35:00.000',
          modifiedDate: '2025-07-10T10:35:00.000',
        },
      ],
    },
    {
      notificationId: 3,
      title: 'Nh·∫Øc nh·ªü u·ªëng thu·ªëc cho h·ªçc sinh',
      createdAt: '2025-07-11T08:37:01.283',
      type: 'Nh·∫Øc nh·ªü',
      isDeleted: false,
      createdby: 'Nurse',
      notificationParentDetails: [],
      notificationstaffdetails: [
        {
          notificationId: 3,
          staffid: 3,
          message:
            'Nh·∫Øc nh·ªü: H·ªçc sinh Nguy·ªÖn VƒÉn An c·∫ßn u·ªëng thu·ªëc v√†o 9h s√°ng v√† 3h chi·ªÅu.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-11T08:37:01.467',
          modifiedDate: '2025-07-11T08:37:01.613',
        },
        {
          notificationId: 3,
          staffid: 4,
          message:
            'Nh·∫Øc nh·ªü: H·ªçc sinh Tr·∫ßn Th·ªã B√¨nh c·∫ßn u·ªëng thu·ªëc v√†o 8h s√°ng v√† 2h chi·ªÅu.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-11T08:37:01.477',
          modifiedDate: '2025-07-11T08:37:01.613',
        },
      ],
    },
  ]);

  const notificationData = notifications || mockNotifications;

  // H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ API ƒë·ªÉ hi·ªÉn th·ªã
  const processNotificationData = apiData => {
    if (!apiData) {
      return [];
    }

    if (!Array.isArray(apiData)) {
      return [];
    }

    if (apiData.length === 0) {
      return [];
    }

    const processed = apiData
      .map(notification => {
        // Ki·ªÉm tra c·∫•u tr√∫c notification
        if (!notification.notificationId) {
          return null;
        }

        // L·∫•y th√¥ng tin chi ti·∫øt cho staff hi·ªán t·∫°i (gi·∫£ s·ª≠ staffid = 3 cho Nurse)
        const currentStaffDetail =
          notification.notificationstaffdetails?.find(
            detail => detail.staffid === 3
          ) || notification.notificationstaffdetails?.[0];

        return {
          id: notification.notificationId,
          title: notification.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ',
          message: currentStaffDetail?.message || 'Kh√¥ng c√≥ n·ªôi dung',
          type: notification.type || 'Chung',
          targetType: 'staff',
          createdAt: notification.createdAt || new Date().toISOString(),
          createdBy: notification.createdby || 'H·ªá th·ªëng',
          staffDetails: notification.notificationstaffdetails || [],
        };
      })
      .filter(Boolean); // Lo·∫°i b·ªè c√°c item null

    return processed;
  };

  const processedNotifications = processNotificationData(notificationData);

  // S·ª≠ d·ª•ng mock data n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API
  const displayNotifications =
    processedNotifications.length > 0
      ? processedNotifications
      : processNotificationData(mockNotifications);

  // Th·ªëng k√™
  const stats = {
    total: displayNotifications.length,
    urgent: displayNotifications.filter(n => n.type === 'Kh·∫©n c·∫•p').length,
  };

  const getTypeBadge = type => {
    const typeMap = {
      'S·ª©c kh·ªèe': { label: 'S·ª©c kh·ªèe', class: 'type-s·ª©c-kh·ªèe' },
      'Kh·∫©n c·∫•p': { label: 'Kh·∫©n c·∫•p', class: 'type-kh·∫©n-c·∫•p' },
      'Nh·∫Øc nh·ªü': { label: 'Nh·∫Øc nh·ªü', class: 'type-nh·∫Øc-nh·ªü' },
      'S·ª± ki·ªán': { label: 'S·ª± ki·ªán', class: 'type-s·ª±-ki·ªán' },
      Chung: { label: 'Chung', class: 'type-chung' },
      general: { label: 'Chung', class: 'type-general' },
      health: { label: 'S·ª©c kh·ªèe', class: 'type-health' },
      emergency: { label: 'Kh·∫©n c·∫•p', class: 'type-emergency' },
      reminder: { label: 'Nh·∫Øc nh·ªü', class: 'type-reminder' },
      event: { label: 'S·ª± ki·ªán', class: 'type-event' },
    };

    const typeInfo = typeMap[type] || typeMap['Chung'];
    return (
      <span className={`type-badge ${typeInfo.class}`}>{typeInfo.label}</span>
    );
  };

  const handleViewDetail = notification => {
    setSelectedNotification(notification);
    setShowDetailModal(true);
  };

  const handleCloseModal = () => {
    setShowDetailModal(false);
    setSelectedNotification(null);
  };

  if (loading) {
    return (
      <div className="notifications-container">
        <div className="loading-container">
          <div className="spinner"></div>
          <p>‚è≥ ƒêang t·∫£i th√¥ng b√°o...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="notifications-container">
        <div className="error-container">
          <p>‚ùå {error}</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="notifications-container">
      <div className="page-header">
        <div className="header-content">
          <h1>üì¢ Qu·∫£n L√Ω Th√¥ng B√°o</h1>
          <p>Xem v√† qu·∫£n l√Ω th√¥ng b√°o t·ª´ nh√† tr∆∞·ªùng</p>
        </div>
        <button onClick={refetch} className="refresh-btn">
          üîÑ L√†m m·ªõi
        </button>
      </div>

      {/* Th·ªëng k√™ */}
      <div className="stats-section">
        <div className="stat-card">
          <div className="stat-icon">üì®</div>
          <div className="stat-content">
            <div className="stat-value">{stats.total}</div>
            <div className="stat-title">T·ªïng Th√¥ng B√°o</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">üö®</div>
          <div className="stat-content">
            <div className="stat-value">{stats.urgent}</div>
            <div className="stat-title">Kh·∫©n C·∫•p</div>
          </div>
        </div>
      </div>

      {/* Danh s√°ch th√¥ng b√°o */}
      <div className="notifications-section">
        <div className="section-header">
          <h2>Th√¥ng B√°o G·∫ßn ƒê√¢y</h2>
        </div>

        {displayNotifications.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üì≠</div>
            <h3>Ch∆∞a c√≥ th√¥ng b√°o n√†o</h3>
            <p>Ch∆∞a c√≥ th√¥ng b√°o n√†o ƒë∆∞·ª£c g·ª≠i</p>
          </div>
        ) : (
          <div className="notifications-table-container">
            <table className="notifications-table">
              <thead>
                <tr>
                  <th>Ti√™u ƒë·ªÅ</th>
                  <th>Lo·∫°i</th>
                  <th>N·ªôi dung</th>
                  <th>ƒê·ªëi t∆∞·ª£ng</th>
                  <th>Ng√†y t·∫°o</th>
                  <th>Ng∆∞·ªùi t·∫°o</th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {displayNotifications.map((notification, index) => (
                  <tr
                    key={notification.id || index}
                    className="notification-row"
                  >
                    <td className="title-cell">
                      <div className="title-content">{notification.title}</div>
                    </td>
                    <td className="type-cell">
                      {getTypeBadge(notification.type)}
                    </td>
                    <td className="message-cell">
                      <div className="message-content">
                        {notification.message.length > 100
                          ? `${notification.message.substring(0, 100)}...`
                          : notification.message}
                      </div>
                    </td>
                    <td className="target-cell">
                      <span
                        className={`target-badge target-${
                          notification.targetType || 'unknown'
                        }`}
                      >
                        {notification.targetType === 'parent'
                          ? 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ph·ª• Huynh'
                          : 'üë©‚Äçüíº Nh√¢n Vi√™n'}
                      </span>
                    </td>
                    <td className="date-cell">
                      {new Date(notification.createdAt).toLocaleDateString(
                        'vi-VN'
                      )}
                    </td>
                    <td className="creator-cell">
                      {notification.createdBy || 'H·ªá th·ªëng'}
                    </td>
                    <td className="action-cell">
                      <button
                        onClick={() => handleViewDetail(notification)}
                        className="view-detail-btn"
                        title="Xem chi ti·∫øt"
                      >
                        üëÅÔ∏è
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal xem chi ti·∫øt */}
      {showDetailModal && selectedNotification && (
        <div className="modal-overlay" onClick={handleCloseModal}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üìã Chi Ti·∫øt Th√¥ng B√°o</h3>
              <button onClick={handleCloseModal} className="close-btn">
                ‚úï
              </button>
            </div>
            <div className="modal-body">
              <div className="detail-section">
                <h4>Th√¥ng tin chung</h4>
                <div className="detail-row">
                  <strong>Ti√™u ƒë·ªÅ:</strong> {selectedNotification.title}
                </div>
                <div className="detail-row">
                  <strong>Lo·∫°i:</strong>{' '}
                  {getTypeBadge(selectedNotification.type)}
                </div>
                <div className="detail-row">
                  <strong>Ng√†y t·∫°o:</strong>{' '}
                  {new Date(selectedNotification.createdAt).toLocaleString(
                    'vi-VN'
                  )}
                </div>
                <div className="detail-row">
                  <strong>Ng∆∞·ªùi t·∫°o:</strong> {selectedNotification.createdBy}
                </div>
                <div className="detail-row">
                  <strong>ƒê·ªëi t∆∞·ª£ng:</strong>{' '}
                  {selectedNotification.targetType === 'parent'
                    ? 'Ph·ª• Huynh'
                    : 'Nh√¢n Vi√™n'}
                </div>
              </div>

              <div className="detail-section">
                <h4>N·ªôi dung chi ti·∫øt</h4>
                <div className="message-detail">
                  {selectedNotification.message}
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button onClick={handleCloseModal} className="close-modal-btn">
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Notifications;
