import React, { useState, useEffect } from 'react';
import { useNurseNotifications } from '../../utils/hooks/useNurse';
import '../../css/Nurse/Notifications.css';
import NotificationsIcon from '@mui/icons-material/Notifications';
import TitleIcon from '@mui/icons-material/Title';
import CategoryIcon from '@mui/icons-material/Category';
import DateRangeIcon from '@mui/icons-material/DateRange';
import MessageIcon from '@mui/icons-material/Message';
import CloseIcon from '@mui/icons-material/Close';
import InfoIcon from '@mui/icons-material/Info';
import WifiIcon from '@mui/icons-material/Wifi';
import WifiOffIcon from '@mui/icons-material/WifiOff';
import NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';

import * as signalR from '@microsoft/signalr'; // Import SignalR client

const Notifications = () => {
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [signalRConnection, setSignalRConnection] = useState(null);
  const [connectionStatus, setConnectionStatus] = useState('Disconnected');
  const [realTimeNotifications, setRealTimeNotifications] = useState([]);

  const {
    data: notifications,
    loading,
    error,
    refetch,
    fetchNotifications,
  } = useNurseNotifications();

  // G·ªçi API khi component mount
  useEffect(() => {
    fetchNotifications();
  }, [fetchNotifications]);

  // Mock data for fallback - c·∫≠p nh·∫≠t theo c·∫•u tr√∫c API th·ª±c t·∫ø
  const [mockNotifications] = useState([
    {
      notificationId: 1,
      title: 'L·ªãch kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ nƒÉm h·ªçc 2025-2026',
      createdAt: '2025-07-09T12:12:02.687',
      type: 'S·ª©c kh·ªèe',
      isDeleted: false,
      createdby: 'Admin',
      notificationParentDetails: [],
      notificationstaffdetails: [
        {
          notificationId: 1,
          staffid: 3,
          message:
            'ƒê/c Y T√° chu·∫©n b·ªã c√¥ng t√°c t·ªï ch·ª©c kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho h·ªçc sinh theo k·∫ø ho·∫°ch.',
          isRead: true,
          isDeleted: false,
          createdDate: '2025-07-09T12:15:38.99',
          modifiedDate: '2025-07-09T12:15:38.99',
        },
        {
          notificationId: 1,
          staffid: 4,
          message:
            'ƒê/c Y Sƒ© ph·ªëi h·ª£p chu·∫©n b·ªã c√¥ng t√°c t·ªï ch·ª©c kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥.',
          isRead: true,
          isDeleted: false,
          createdDate: '2025-07-09T12:15:38.99',
          modifiedDate: '2025-07-09T12:15:38.99',
        },
        {
          notificationId: 1,
          staffid: 5,
          message:
            'Gi√°o vi√™n ch·ªß nhi·ªám th√¥ng b√°o l·ªãch kh√°m s·ª©c kh·ªèe cho h·ªçc sinh v√† ph·ª• huynh l·ªõp m√¨nh.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-09T12:15:38.99',
          modifiedDate: '2025-07-09T12:15:38.99',
        },
      ],
    },
    {
      notificationId: 2,
      title: 'Th√¥ng b√°o v·ªÅ d·ªãch b·ªánh c√∫m A/H1N1',
      createdAt: '2025-07-10T10:30:00.000',
      type: 'Kh·∫©n c·∫•p',
      isDeleted: false,
      createdby: 'Manager',
      notificationParentDetails: [],
      notificationstaffdetails: [
        {
          notificationId: 2,
          staffid: 3,
          message:
            'Y T√° c·∫ßn tƒÉng c∆∞·ªùng gi√°m s√°t s·ª©c kh·ªèe h·ªçc sinh, ph√°t hi·ªán s·ªõm c√°c tri·ªáu ch·ª©ng c√∫m.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-10T10:35:00.000',
          modifiedDate: '2025-07-10T10:35:00.000',
        },
        {
          notificationId: 2,
          staffid: 4,
          message:
            'Y Sƒ© chu·∫©n b·ªã thu·ªëc v√† thi·∫øt b·ªã y t·∫ø ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-10T10:35:00.000',
          modifiedDate: '2025-07-10T10:35:00.000',
        },
      ],
    },
    {
      notificationId: 3,
      title: 'Nh·∫Øc nh·ªü u·ªëng thu·ªëc cho h·ªçc sinh',
      createdAt: '2025-07-11T08:37:01.283',
      type: 'Nh·∫Øc nh·ªü',
      isDeleted: false,
      createdby: 'Nurse',
      notificationParentDetails: [],
      notificationstaffdetails: [
        {
          notificationId: 3,
          staffid: 3,
          message:
            'Nh·∫Øc nh·ªü: H·ªçc sinh Nguy·ªÖn VƒÉn An c·∫ßn u·ªëng thu·ªëc v√†o 9h s√°ng v√† 3h chi·ªÅu.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-11T08:37:01.467',
          modifiedDate: '2025-07-11T08:37:01.613',
        },
        {
          notificationId: 3,
          staffid: 4,
          message:
            'Nh·∫Øc nh·ªü: H·ªçc sinh Tr·∫ßn Th·ªã B√¨nh c·∫ßn u·ªëng thu·ªëc v√†o 8h s√°ng v√† 2h chi·ªÅu.',
          isRead: false,
          isDeleted: false,
          createdDate: '2025-07-11T08:37:01.477',
          modifiedDate: '2025-07-11T08:37:01.613',
        },
      ],
    },
  ]);

  const notificationData = notifications || mockNotifications;

  // H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ API ƒë·ªÉ hi·ªÉn th·ªã
  const processNotificationData = apiData => {
    if (!apiData) {
      return [];
    }

    if (!Array.isArray(apiData)) {
      return [];
    }

    if (apiData.length === 0) {
      return [];
    }

    const processed = apiData
      .map(notification => {
        // Ki·ªÉm tra c·∫•u tr√∫c notification
        if (!notification.notificationId) {
          return null;
        }

        // L·∫•y th√¥ng tin chi ti·∫øt cho staff hi·ªán t·∫°i (gi·∫£ s·ª≠ staffid = 3 cho Nurse)
        const currentStaffDetail =
          notification.notificationstaffdetails?.find(
            detail => detail.staffid === 3
          ) || notification.notificationstaffdetails?.[0];

        return {
          id: notification.notificationId,
          title: notification.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ',
          message: currentStaffDetail?.message || 'Kh√¥ng c√≥ n·ªôi dung',
          type: notification.type || 'Chung',
          targetType: 'staff',
          createdAt: notification.createdAt || new Date().toISOString(),
          createdBy: notification.createdby || 'H·ªá th·ªëng',
          staffDetails: notification.notificationstaffdetails || [],
        };
      })
      .filter(Boolean) // Lo·∫°i b·ªè c√°c item null
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)); // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t tr∆∞·ªõc

    return processed;
  };

  const processedNotifications = processNotificationData(notificationData);

  // S·ª≠ d·ª•ng mock data n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API
  const displayNotifications =
    processedNotifications.length > 0
      ? processedNotifications
      : processNotificationData(mockNotifications);

  // SignalR Connection Setup
  useEffect(() => {
    if (!signalRConnection) {
      const newConnection = new signalR.HubConnectionBuilder()
        .withUrl(
          'https://api-schoolhealth.purintech.id.vn/hubs/notifications',
          {
            skipNegotiation: true,
            transport: signalR.HttpTransportType.WebSockets,
            accessTokenFactory: () => {
              // L·∫•y JWT token t·ª´ localStorage
              const token = localStorage.getItem('token');
              console.log(
                'üîë Sending JWT token to SignalR:',
                token ? 'Token found' : 'No token'
              );
              return token;
            },
          }
        )
        .withAutomaticReconnect()
        .build();

      setSignalRConnection(newConnection);
    }

    // Cleanup function for connection
    return () => {
      if (
        signalRConnection &&
        signalRConnection.state === signalR.HubConnectionState.Connected
      ) {
        signalRConnection.stop();
      }
    };
  }, [signalRConnection]);

  // SignalR Event Handlers
  useEffect(() => {
    if (signalRConnection) {
      signalRConnection
        .start()
        .then(() => {
          console.log('üîó SignalR connected for Nurse notifications');
          setConnectionStatus('Connected');

          // Listen for staff notifications
          signalRConnection.on('ReceiveNotification', notification => {
            console.log('üì¢ New staff notification:', notification);

            const newNotification = {
              id: Date.now(),
              title:
                notification.Title || notification.title || 'Th√¥ng b√°o m·ªõi',
              message: notification.Message || notification.message || '',
              type: notification.Type || 'general',
              targetType: 'staff',
              createdAt: new Date().toISOString(),
              createdBy: 'H·ªá th·ªëng',
              isNew: true,
            };

            setRealTimeNotifications(prev => [newNotification, ...prev]);

            // Show browser notification
            if (Notification.permission === 'granted') {
              new Notification(newNotification.title, {
                body: newNotification.message,
                icon: '/favicon.ico',
                tag: 'nurse-notification',
              });
            }

            // Refresh notifications after receiving new one
            // setTimeout(() => {
            //   fetchNotifications();
            // }, 1000);
          });

          // Listen for staff-specific notifications
          signalRConnection.on('ReceiveStaffNotification', notification => {
            console.log('üë©‚Äç‚öïÔ∏è Nurse notification:', notification);

            const newNotification = {
              id: Date.now(),
              title:
                notification.Title ||
                notification.title ||
                'Th√¥ng b√°o nh√¢n vi√™n',
              message: notification.Message || notification.message || '',
              type: notification.Type || 'general',
              targetType: 'staff',
              createdAt: new Date().toISOString(),
              createdBy: 'H·ªá th·ªëng',
              isNew: true,
            };

            setRealTimeNotifications(prev => [newNotification, ...prev]);

            // Show browser notification
            if (Notification.permission === 'granted') {
              new Notification(newNotification.title, {
                body: newNotification.message,
                icon: '/favicon.ico',
                tag: 'nurse-notification',
              });
            }

            // Refresh notifications
            setTimeout(() => {
              fetchNotifications();
            }, 1000);
          });

          // Listen for errors
          signalRConnection.on('ReceiveError', errorMsg => {
            console.error('‚ùå SignalR Error:', errorMsg);
            setConnectionStatus('Error');
          });

          // Request notification permission
          if (
            'Notification' in window &&
            Notification.permission === 'default'
          ) {
            Notification.requestPermission();
          }
        })
        .catch(e => {
          console.error('‚ùå SignalR connection failed:', e);
          setConnectionStatus('Failed');
        });

      // Cleanup event listeners
      return () => {
        if (signalRConnection) {
          signalRConnection.off('ReceiveNotification');
          signalRConnection.off('ReceiveStaffNotification');
          signalRConnection.off('ReceiveError');
        }
      };
    }
  }, [signalRConnection, fetchNotifications]);

  // Combine API notifications with real-time notifications
  const allNotifications = [...realTimeNotifications, ...displayNotifications]
    .filter(
      (notification, index, self) =>
        index === self.findIndex(n => n.id === notification.id)
    )
    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

  const getTypeBadge = type => {
    const typeMap = {
      'S·ª©c kh·ªèe': { label: 'S·ª©c kh·ªèe', class: 'type-s·ª©c-kh·ªèe' },
      'Kh·∫©n c·∫•p': { label: 'Kh·∫©n c·∫•p', class: 'type-kh·∫©n-c·∫•p' },
      'Nh·∫Øc nh·ªü': { label: 'Nh·∫Øc nh·ªü', class: 'type-nh·∫Øc-nh·ªü' },
      'S·ª± ki·ªán': { label: 'S·ª± ki·ªán', class: 'type-s·ª±-ki·ªán' },
      Chung: { label: 'Chung', class: 'type-chung' },
      general: { label: 'Chung', class: 'type-general' },
      health: { label: 'S·ª©c kh·ªèe', class: 'type-health' },
      emergency: { label: 'Kh·∫©n c·∫•p', class: 'type-emergency' },
      reminder: { label: 'Nh·∫Øc nh·ªü', class: 'type-reminder' },
      event: { label: 'S·ª± ki·ªán', class: 'type-event' },
    };

    const typeInfo = typeMap[type] || typeMap['Chung'];
    return (
      <span className={`type-badge ${typeInfo.class}`}>{typeInfo.label}</span>
    );
  };

  const handleViewDetail = notification => {
    setSelectedNotification(notification);
    setShowDetailModal(true);
  };

  const handleCloseModal = () => {
    setShowDetailModal(false);
    setSelectedNotification(null);
  };

  if (loading) {
    return (
      <div className="notifications-container">
        <div className="loading-container">
          <div className="spinner"></div>
          <p>‚è≥ ƒêang t·∫£i th√¥ng b√°o...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="notifications-container">
        <div className="error-container">
          <p>‚ùå {error}</p>
          <button onClick={refetch} className="retry-btn">
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="notifications-container">
      <div className="page-header">
        <div className="header-content">
          <h1>üì¢ Qu·∫£n L√Ω Th√¥ng B√°o</h1>
          <p>Xem v√† qu·∫£n l√Ω th√¥ng b√°o t·ª´ nh√† tr∆∞·ªùng</p>
        </div>
        <div className="connection-status">
          {connectionStatus === 'Connected' ? (
            <div className="connection-indicator connected">
              <WifiIcon sx={{ fontSize: '1.2rem', color: '#4CAF50' }} />
              <span>K·∫øt n·ªëi tr·ª±c ti·∫øp</span>
            </div>
          ) : (
            <div className="connection-indicator disconnected">
              <WifiOffIcon sx={{ fontSize: '1.2rem', color: '#f44336' }} />
              <span>M·∫•t k·∫øt n·ªëi</span>
            </div>
          )}
        </div>
      </div>

      {/* Danh s√°ch th√¥ng b√°o */}
      <div className="notifications-section">
        <div className="section-header">
          <h2>Th√¥ng B√°o G·∫ßn ƒê√¢y</h2>
        </div>

        {allNotifications.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üì≠</div>
            <h3>Ch∆∞a c√≥ th√¥ng b√°o n√†o</h3>
            <p>Ch∆∞a c√≥ th√¥ng b√°o n√†o ƒë∆∞·ª£c g·ª≠i</p>
          </div>
        ) : (
          <div className="notifications-table-container">
            <table className="notifications-table">
              <thead>
                <tr>
                  <th>Ti√™u ƒë·ªÅ</th>
                  <th>Lo·∫°i</th>
                  <th>N·ªôi dung</th>
                  <th>ƒê·ªëi t∆∞·ª£ng</th>
                  <th>Ng√†y t·∫°o</th>
                  <th>Ng∆∞·ªùi t·∫°o</th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {allNotifications.map((notification, index) => (
                  <tr
                    key={notification.id || index}
                    className={`notification-row ${
                      notification.isNew ? 'new-notification' : ''
                    }`}
                  >
                    <td className="title-cell">
                      <div className="title-content">
                        {notification.isNew && (
                          <NotificationsActiveIcon
                            sx={{
                              fontSize: '1rem',
                              color: '#4CAF50',
                              marginRight: '5px',
                            }}
                          />
                        )}
                        {notification.title}
                      </div>
                    </td>
                    <td className="type-cell">
                      {getTypeBadge(notification.type)}
                    </td>
                    <td className="message-cell">
                      <div className="message-content">
                        {notification.message.length > 100
                          ? `${notification.message.substring(0, 100)}...`
                          : notification.message}
                      </div>
                    </td>
                    <td className="target-cell">
                      <span
                        className={`target-badge target-${
                          notification.targetType || 'unknown'
                        }`}
                      >
                        {notification.targetType === 'parent'
                          ? 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ph·ª• Huynh'
                          : 'üë©‚Äçüíº Nh√¢n Vi√™n'}
                      </span>
                    </td>
                    <td className="date-cell">
                      {new Date(notification.createdAt).toLocaleDateString(
                        'vi-VN'
                      )}
                    </td>
                    <td className="creator-cell">
                      {notification.createdBy || 'H·ªá th·ªëng'}
                    </td>
                    <td className="action-cell">
                      <button
                        onClick={() => handleViewDetail(notification)}
                        className="view-detail-btn"
                        title="Xem chi ti·∫øt"
                      >
                        üëÅÔ∏è
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal xem chi ti·∫øt */}
      {showDetailModal && selectedNotification && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000,
            padding: '20px',
          }}
          onClick={handleCloseModal}
        >
          <div
            style={{
              background: 'white',
              borderRadius: '20px',
              width: '100%',
              maxWidth: '700px',
              maxHeight: '90vh',
              overflow: 'auto',
              border: '1px solid #c1cbc2',
              boxShadow: '0 20px 60px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)',
            }}
            onClick={e => e.stopPropagation()}
          >
            {/* Modal Header */}
            <div
              style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '25px',
                borderBottom: '1px solid #e9ecef',
              }}
            >
              <h3
                style={{
                  margin: 0,
                  color: '#2f5148',
                  fontFamily: 'Satoshi, sans-serif',
                  fontSize: '1.5rem',
                  fontWeight: 600,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '10px',
                }}
              >
                <InfoIcon sx={{ color: '#97a19b', fontSize: '1.5rem' }} />
                Chi Ti·∫øt Th√¥ng B√°o
              </h3>
              <button
                style={{
                  background: 'transparent',
                  border: 'none',
                  color: '#97a19b',
                  cursor: 'pointer',
                  fontSize: '1.5rem',
                  padding: '5px',
                  borderRadius: '50%',
                  transition: 'all 0.3s ease',
                }}
                onClick={handleCloseModal}
              >
                <CloseIcon sx={{ fontSize: '1.5rem' }} />
              </button>
            </div>

            {/* Modal Body */}
            <div style={{ padding: '25px' }}>
              {/* Basic Information */}
              <div
                style={{
                  display: 'grid',
                  gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
                  gap: '15px',
                  marginBottom: '25px',
                }}
              >
                <div
                  style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    padding: '10px 12px',
                    background: '#f8f9fa',
                    borderRadius: '8px',
                    border: '1px solid #e9ecef',
                  }}
                >
                  <span
                    style={{
                      color: '#97a19b',
                      fontFamily: 'Satoshi, sans-serif',
                      fontSize: '0.8rem',
                      fontWeight: 500,
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                    }}
                  >
                    <TitleIcon sx={{ fontSize: '0.9rem' }} />
                    Ti√™u ƒë·ªÅ:
                  </span>
                  <span
                    style={{
                      color: '#2f5148',
                      fontFamily: 'Satoshi, sans-serif',
                      fontSize: '0.8rem',
                      fontWeight: 600,
                      textAlign: 'right',
                      maxWidth: '60%',
                    }}
                  >
                    {selectedNotification.title}
                  </span>
                </div>
                <div
                  style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    padding: '10px 12px',
                    background: '#f8f9fa',
                    borderRadius: '8px',
                    border: '1px solid #e9ecef',
                  }}
                >
                  <span
                    style={{
                      color: '#97a19b',
                      fontFamily: 'Satoshi, sans-serif',
                      fontSize: '0.8rem',
                      fontWeight: 500,
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                    }}
                  >
                    <CategoryIcon sx={{ fontSize: '0.9rem' }} />
                    Lo·∫°i:
                  </span>
                  <span
                    style={{
                      color: '#2f5148',
                      fontFamily: 'Satoshi, sans-serif',
                      fontSize: '0.8rem',
                      fontWeight: 600,
                    }}
                  >
                    {getTypeBadge(selectedNotification.type)}
                  </span>
                </div>
                <div
                  style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    padding: '10px 12px',
                    background: '#f8f9fa',
                    borderRadius: '8px',
                    border: '1px solid #e9ecef',
                    gridColumn: '1 / -1',
                  }}
                >
                  <span
                    style={{
                      color: '#97a19b',
                      fontFamily: 'Satoshi, sans-serif',
                      fontSize: '0.8rem',
                      fontWeight: 500,
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                    }}
                  >
                    <DateRangeIcon sx={{ fontSize: '0.9rem' }} />
                    Ng√†y nh·∫≠n:
                  </span>
                  <span
                    style={{
                      color: '#2f5148',
                      fontFamily: 'Satoshi, sans-serif',
                      fontSize: '0.8rem',
                      fontWeight: 600,
                    }}
                  >
                    {new Date(selectedNotification.createdAt).toLocaleString(
                      'vi-VN'
                    )}
                  </span>
                </div>
              </div>

              {/* Message Content */}
              <div
                style={{
                  background: '#f8f9fa',
                  padding: '20px',
                  borderRadius: '12px',
                  border: '1px solid #e9ecef',
                }}
              >
                <h4
                  style={{
                    margin: '0 0 15px 0',
                    color: '#2f5148',
                    fontFamily: 'Satoshi, sans-serif',
                    fontSize: '1.1rem',
                    fontWeight: 600,
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                  }}
                >
                  <MessageIcon sx={{ color: '#97a19b', fontSize: '1.2rem' }} />
                  N·ªôi dung th√¥ng b√°o
                </h4>
                <div
                  style={{
                    color: '#2f5148',
                    fontSize: '1rem',
                    fontFamily: 'Satoshi, sans-serif',
                    lineHeight: 1.6,
                    fontWeight: 500,
                    whiteSpace: 'pre-wrap',
                    wordBreak: 'break-word',
                  }}
                >
                  {selectedNotification.message}
                </div>
              </div>
            </div>

            {/* Modal Footer */}
            <div
              style={{
                padding: '20px 25px',
                borderTop: '1px solid #e9ecef',
                display: 'flex',
                justifyContent: 'flex-end',
              }}
            >
              <button
                onClick={handleCloseModal}
                style={{
                  background: '#bfefa1',
                  color: '#1a3a2e',
                  border: 'none',
                  padding: '12px 24px',
                  borderRadius: '10px',
                  cursor: 'pointer',
                  fontSize: '1rem',
                  fontWeight: 500,
                  fontFamily: 'Satoshi, sans-serif',
                  transition: 'all 0.3s ease',
                }}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Notifications;
