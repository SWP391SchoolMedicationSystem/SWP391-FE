import React, { useState, useEffect } from 'react';
import '../../css/Parent/DonateMedicine.css';

// Mock data ƒë∆°n thu·ªëc g·ª≠i cho h·ªçc sinh
const mockMedicineRequests = [
  {
    id: 1,
    studentName: 'Nguy·ªÖn Minh Kh√¥i',
    class: '5A',
    parentName: 'L√™ VƒÉn H.',
    medicineName: 'Paracetamol 500mg',
    medicineType: 'Thu·ªëc gi·∫£m ƒëau',
    quantity: '20 vi√™n',
    expiryDate: '2024-12-31',
    condition: 'C√≤n t·ªët',
    description: 'Thu·ªëc gi·∫£m ƒëau, h·∫° s·ªët cho tr·∫ª em',
    contactPhone: '0123456789',
    preferredTime: 'S√°ng 8-12h',
    status: 'pending',
    createdAt: '2024-03-10T10:30:00Z',
  },
  {
    id: 2,
    studentName: 'Tr·∫ßn Th·ªã B√≠ch',
    class: '4B',
    parentName: 'Nguy·ªÖn Th·ªã T.',
    medicineName: 'Vitamin C',
    medicineType: 'Vitamin',
    quantity: '30 vi√™n',
    expiryDate: '2024-11-15',
    condition: 'R·∫•t t·ªët',
    description: 'Vitamin C tƒÉng c∆∞·ªùng s·ª©c ƒë·ªÅ kh√°ng',
    contactPhone: '0987654321',
    preferredTime: 'Chi·ªÅu 14-18h',
    status: 'approved',
    createdAt: '2024-02-28T14:20:00Z',
  },
];

const statusMap = {
  pending: { class: 'status-pending', text: 'Ch·ªù duy·ªát' },
  approved: { class: 'status-approved', text: 'ƒê√£ ch·∫•p thu·∫≠n' },
  rejected: { class: 'status-rejected', text: 'T·ª´ ch·ªëi' },
  completed: { class: 'status-approved', text: 'Ho√†n th√†nh' },
};

const ViewStudentMedicine = () => {
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [actionLoading, setActionLoading] = useState(null);

  useEffect(() => {
    // TODO: Replace with real API call
    setLoading(true);
    setTimeout(() => {
      setRequests(mockMedicineRequests);
      setLoading(false);
    }, 500);
  }, []);

  const handleApprove = (id) => {
    setActionLoading(id);
    setTimeout(() => {
      setRequests((prev) =>
        prev.map((req) =>
          req.id === id ? { ...req, status: 'approved' } : req
        )
      );
      setActionLoading(null);
    }, 600);
  };

  const handleReject = (id) => {
    setActionLoading(id);
    setTimeout(() => {
      setRequests((prev) =>
        prev.map((req) =>
          req.id === id ? { ...req, status: 'rejected' } : req
        )
      );
      setActionLoading(null);
    }, 600);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return (
    <div className="donate-medicine-container">
      <div className="donate-header">
        <div>
          <h1>ƒê∆°n Thu·ªëc Ph·ª• Huynh G·ª≠i Cho H·ªçc Sinh</h1>
          <p>Xem, ki·ªÉm tra v√† duy·ªát c√°c ƒë∆°n thu·ªëc ph·ª• huynh g·ª≠i cho h·ªçc sinh</p>
        </div>
      </div>
      <div className="donate-history-section">
        <div className="history-header">
          <h3>üì¶ Danh S√°ch ƒê∆°n Thu·ªëc G·ª≠i</h3>
        </div>
        <div className="history-content">
          {loading ? (
            <div className="empty-history">
              <h4>ƒêang t·∫£i...</h4>
            </div>
          ) : requests.length === 0 ? (
            <div className="empty-history">
              <h4>Ch∆∞a c√≥ ƒë∆°n thu·ªëc n√†o</h4>
            </div>
          ) : (
            requests.map((req) => (
              <div key={req.id} className="history-item">
                <h4>{req.medicineName}</h4>
                <div className="history-details">
                  <div className="history-detail">
                    <label>H·ªçc sinh:</label>
                    <span>{req.studentName} - L·ªõp {req.class}</span>
                  </div>
                  <div className="history-detail">
                    <label>Ph·ª• huynh:</label>
                    <span>{req.parentName}</span>
                  </div>
                  <div className="history-detail">
                    <label>Lo·∫°i thu·ªëc:</label>
                    <span>{req.medicineType}</span>
                  </div>
                  <div className="history-detail">
                    <label>S·ªë l∆∞·ª£ng:</label>
                    <span>{req.quantity}</span>
                  </div>
                  <div className="history-detail">
                    <label>H·∫°n s·ª≠ d·ª•ng:</label>
                    <span>{req.expiryDate}</span>
                  </div>
                  <div className="history-detail">
                    <label>T√¨nh tr·∫°ng:</label>
                    <span>{req.condition}</span>
                  </div>
                  <div className="history-detail">
                    <label>SƒêT li√™n h·ªá:</label>
                    <span>{req.contactPhone}</span>
                  </div>
                  <div className="history-detail">
                    <label>Th·ªùi gian thu·∫≠n ti·ªán:</label>
                    <span>{req.preferredTime}</span>
                  </div>
                </div>
                {req.description && (
                  <div className="history-detail">
                    <label>M√¥ t·∫£:</label>
                    <span>{req.description}</span>
                  </div>
                )}
                <div className="history-status">
                  <span className={`status-badge ${statusMap[req.status]?.class}`}>{statusMap[req.status]?.text}</span>
                  <span className="history-date">{formatDate(req.createdAt)}</span>
                </div>
                {req.status === 'pending' && (
                  <div style={{ marginTop: 16, display: 'flex', gap: 12 }}>
                    <button
                      className="submit-btn"
                      style={{ width: 140, background: 'linear-gradient(135deg, #28a745 0%, #20c997 100%)' }}
                      onClick={() => handleApprove(req.id)}
                      disabled={actionLoading === req.id}
                    >
                      {actionLoading === req.id ? 'ƒêang duy·ªát...' : 'Ch·∫•p thu·∫≠n'}
                    </button>
                    <button
                      className="submit-btn"
                      style={{ width: 140, background: 'linear-gradient(135deg, #dc3545 0%, #fd7e14 100%)' }}
                      onClick={() => handleReject(req.id)}
                      disabled={actionLoading === req.id}
                    >
                      {actionLoading === req.id ? 'ƒêang x·ª≠ l√Ω...' : 'T·ª´ ch·ªëi'}
                    </button>
                  </div>
                )}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default ViewStudentMedicine; 